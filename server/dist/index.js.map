{
  "version": 3,
  "sources": ["../index.ts", "../routes.ts", "../storage.ts", "../../shared/schema.ts", "../viteServer.ts"],
  "sourcesContent": ["import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./viteServer\";\n\nconst app = express();\n\n// CORS configuration - MUST be first middleware\nconst corsOptions = {\n  origin: [\n    'https://jobscraper-z5v4.onrender.com',\n    'http://localhost:5173',\n    'http://localhost:3000',\n    'http://localhost:5000'\n  ],\n  credentials: true,\n  optionsSuccessStatus: 200,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\n  allowedHeaders: [\n    'Content-Type', \n    'Authorization', \n    'X-Requested-With',\n    'Accept',\n    'Origin'\n  ]\n};\n\n// Apply CORS middleware first\napp.use(cors(corsOptions));\n\n// Handle preflight OPTIONS requests explicitly\napp.options('*', cors(corsOptions));\n\n// Basic middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false }));\n\n// Debug middleware - Remove in production\napp.use((req, res, next) => {\n  console.log(`\\n=== ${new Date().toISOString()} ===`);\n  console.log(`${req.method} ${req.url}`);\n  console.log('Origin:', req.headers.origin);\n  console.log('User-Agent:', req.headers['user-agent']?.substring(0, 50) + '...');\n  console.log('Authorization:', req.headers.authorization ? 'Bearer ***' : 'None');\n  console.log('Content-Type:', req.headers['content-type'] || 'None');\n  \n  // Log response when finished\n  const originalSend = res.send;\n  res.send = function(data) {\n    console.log(`Response: ${res.statusCode}`);\n    console.log('=================================\\n');\n    return originalSend.call(this, data);\n  };\n  \n  next();\n});\n\n// Request timing middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse && res.statusCode >= 400) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 120) {\n        logLine = logLine.slice(0, 119) + \"\u2026\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'development'\n  });\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    // Enhanced error handler\n    app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n      console.error('Error occurred:', {\n        message: err.message,\n        stack: err.stack,\n        method: req.method,\n        url: req.url,\n        origin: req.headers.origin\n      });\n\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      res.status(status).json({ \n        error: message,\n        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n      });\n    });\n\n    // 404 handler for API routes\n    app.use('/api/*', (req, res) => {\n      res.status(404).json({ error: `API endpoint not found: ${req.method} ${req.path}` });\n    });\n\n    // Setup static serving or Vite\n    if (process.env.NODE_ENV === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    const port = parseInt(process.env.PORT || '5000', 10);\n    \n    server.listen(port, \"0.0.0.0\", () => {\n      log(`\uD83D\uDE80 Server running on http://0.0.0.0:${port}`);\n      log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n      log(`CORS enabled for origins: ${corsOptions.origin.join(', ')}`);\n    });\n\n  } catch (error) {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  }\n})();", "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertCompanySchema } from \"../shared/schema\";\nimport { createClient } from '@supabase/supabase-js';\nimport { z } from \"zod\";\nimport bcrypt from 'bcrypt';\n\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// Auth middleware\nconst authenticateUser = async (req: any, res: any, next: any) => {\n  try {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({ error: 'No authorization token provided' });\n    }\n\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    if (error || !user) {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n\n    req.userId = user.id;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { email, password, fullName } = insertUserSchema.parse(req.body);\n      \n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            full_name: fullName\n          }\n        }\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      res.json({ user: data.user, session: data.session });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Validation error', details: error.flatten() });\n      }\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      res.json({ user: data.user, session: data.session });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/auth/logout', authenticateUser, async (req, res) => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Companies routes\n  app.get('/api/companies', authenticateUser, async (req: any, res) => {\n    try {\n      const companies = await storage.getCompanies(req.userId);\n      res.json(companies);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/companies', authenticateUser, async (req: any, res) => {\n    try {\n      const { url, keywords, priority, checkInterval } = req.body;\n      \n      // Extract company name from URL\n      const extractCompanyName = (url: string): string => {\n        try {\n          const domain = new URL(url).hostname;\n          const parts = domain.replace('www.', '').split('.');\n          return parts[0] ?? 'Unknown Company';\n        } catch {\n          return 'Unknown Company';\n        }\n      };\n      \n      const name = extractCompanyName(url);\n      const keywordsArray = typeof keywords === 'string' \n        ? keywords.split(',').map(kw => kw.trim()).filter(Boolean) \n        : keywords;\n      \n      // Find career page URL\n      let careerPageUrl = req.body.careerPageUrl || `${url}/careers`;\n      \n      const convertIntervalToMinutes = (interval: string): number => {\n        const parts = interval.trim().split(\" \");\n        const value = parseInt(parts[0], 10);\n        const unit = parts[1];\n        \n        switch (unit?.toLowerCase()) {\n          case \"hour\": case \"hours\": return value * 60;\n          case \"day\": case \"days\": return value * 60 * 24;\n          case \"week\": case \"weeks\": return value * 60 * 24 * 7;\n          default: return 1440; // Default to 1 day\n        }\n      };\n      \n      const company = await storage.createCompany({\n        name,\n        url,\n        career_page_url: careerPageUrl,\n        keywords: keywordsArray,\n        priority,\n        status: 'active',\n        check_interval_minutes: convertIntervalToMinutes(checkInterval),\n        user_id: req.userId\n      });\n      \n      // Simulate job scraping results for now\n      interface MockJob {\n        title: string;\n        url: string;\n        description: string;\n        salary: string;\n        requirements: string[];\n        matchedKeywords: string[];\n        dateFound: string;\n        status: string;\n        priority: any;\n        companyId: number;\n        user_id: string;\n      }\n\n      const mockJobs: MockJob[] = [\n        {\n          title: `Frontend Developer at ${name}`,\n          url: `${url}/jobs/frontend-developer`,\n          description: `We are looking for a talented Frontend Developer to join our team. You will be responsible for building user-facing features and ensuring great user experience.`,\n          salary: '$80,000 - $120,000',\n          requirements: ['React', 'TypeScript', 'CSS'],\n          matchedKeywords: (keywordsArray as string[]).filter((k: string) => ['frontend', 'react', 'javascript'].includes(k.toLowerCase())),\n          dateFound: new Date().toISOString(),\n          status: 'New',\n          priority,\n          companyId: company.id as number,\n          user_id: req.userId as string\n        },\n        {\n          title: `Software Engineer at ${name}`,\n          url: `${url}/jobs/software-engineer`,\n          description: `Join our engineering team to build scalable software solutions. Work with modern technologies and contribute to exciting projects.`,\n          salary: '$90,000 - $140,000',\n          requirements: ['JavaScript', 'Node.js', 'Database'],\n          matchedKeywords: (keywordsArray as string[]).filter((k: string) => ['developer', 'engineer', 'javascript'].includes(k.toLowerCase())),\n          dateFound: new Date().toISOString(),\n          status: 'New',\n          priority,\n          companyId: company.id as number,\n          user_id: req.userId as string\n        }\n      ].filter((job: MockJob) => job.matchedKeywords.length > 0 || (keywordsArray as string[]).length === 0);\n      \n      // Insert jobs if any were found\n      for (const job of mockJobs) {\n        try {\n          await supabase.from('jobs').insert(job);\n        } catch (error) {\n          console.error('Error inserting job:', error);\n        }\n      }\n      \n      res.json({ \n        success: true, \n        company, \n        jobsFound: mockJobs.length,\n        jobs: mockJobs \n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete('/api/companies/:id', authenticateUser, async (req: any, res) => {\n    try {\n      await storage.deleteCompany(parseInt(req.params.id), req.userId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put('/api/companies/:id/priority', authenticateUser, async (req: any, res) => {\n    try {\n      const { priority } = req.body;\n      await storage.updateCompanyPriority(parseInt(req.params.id), priority);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Jobs routes\n  app.get('/api/jobs', authenticateUser, async (req: any, res) => {\n    try {\n      const jobs = await storage.getJobs(req.userId);\n      res.json(jobs);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete('/api/jobs/:id', authenticateUser, async (req: any, res) => {\n    try {\n      await storage.deleteJob(parseInt(req.params.id), req.userId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/jobs/:id/apply', authenticateUser, async (req: any, res) => {\n    try {\n      await storage.updateJobStatus(parseInt(req.params.id), 'Applied', new Date().toISOString());\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Stats route\n  app.get('/api/stats', authenticateUser, async (req: any, res) => {\n    try {\n      const [companies, jobs] = await Promise.all([\n        storage.getCompanies(req.userId),\n        storage.getJobs(req.userId)\n      ]);\n\n      const stats = {\n        trackedCompanies: companies.length,\n        totalJobs: jobs.length,\n        searchedJobs: jobs.filter(job => job.matchedKeywords && job.matchedKeywords.length > 0).length,\n        appliedJobs: jobs.filter(job => job.status === 'Applied').length,\n        recentJobs: jobs.filter(job => {\n          const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n          return new Date(job.dateFound) > dayAgo;\n        }).length\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n", "import dotenv from 'dotenv';\nimport { createClient } from '@supabase/supabase-js';\nimport type { User, InsertUser, Company, Job } from \"@shared/schema\";\nimport { Database } from '../types/database';\n\ndotenv.config();\n\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\n\nconst supabase = createClient<Database>(supabaseUrl, supabaseKey);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Companies\n  getCompanies(userId: string): Promise<Company[]>;\n  createCompany(company: any): Promise<Company>;\n  deleteCompany(id: number, userId: string): Promise<void>;\n  updateCompanyPriority(id: number, priority: string): Promise<void>;\n  \n  // Jobs\n  getJobs(userId: string): Promise<Job[]>;\n  deleteJob(id: number, userId: string): Promise<void>;\n  updateJobStatus(id: number, status: string, appliedAt?: string): Promise<void>;\n}\n\nexport class SupabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) return undefined;\n    return data as User;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('email', email)\n      .single();\n    \n    if (error) return undefined;\n    return data as User;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const { data, error } = await supabase\n      .from('users')\n      .insert(user as any)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as User;\n  }\n\n  async getCompanies(userId: string): Promise<Company[]> {\n    const { data, error } = await supabase\n      .from('companies')\n      .select('*')\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n    return (data || []) as Company[];\n  }\n\n  async createCompany(company: any): Promise<Company> {\n    const { data, error } = await supabase\n      .from('companies')\n      .insert({\n        name: company.name,\n        url: company.url,\n        career_page_url: company.career_page_url,\n        keywords: company.keywords,\n        priority: company.priority || 'medium',\n        status: company.status || 'active',\n        check_interval_minutes: company.check_interval_minutes || 1440,\n        user_id: company.user_id\n      })\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as Company;\n  }\n\n  async deleteCompany(id: number, userId: string): Promise<void> {\n    // First delete associated jobs\n    await supabase\n      .from('jobs')\n      .delete()\n      .eq('company_id', id)\n      .eq('user_id', userId);\n    \n    // Then delete company\n    const { error } = await supabase\n      .from('companies')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n  }\n\n  async updateCompanyPriority(id: number, priority: string): Promise<void> {\n    const { error } = await supabase\n      .from('companies')\n      .update({ priority } as any)\n      .eq('id', id);\n    \n    if (error) throw error;\n  }\n\n  async getJobs(userId: string): Promise<Job[]> {\n    const { data, error } = await supabase\n      .from('jobs')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.log('Error fetching jobs:', error);\n      return []; // Return empty array instead of throwing\n    }\n    return (data || []) as Job[];\n  }\n\n  async deleteJob(id: number, userId: string): Promise<void> {\n    const { error } = await supabase\n      .from('jobs')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n  }\n\n  async updateJobStatus(id: number, status: string, appliedAt?: string): Promise<void> {\n    const updateData: any = { status };\n    if (appliedAt) updateData.applied_at = appliedAt;\n    \n    const { error } = await supabase\n      .from('jobs')\n      .update(updateData as any)\n      .eq('id', id);\n    \n    if (error) throw error;\n  }\n}\n\nexport const storage = new SupabaseStorage();\n", "import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const companies = pgTable(\"companies\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  name: text(\"name\").notNull(),\n  url: text(\"url\").notNull(),\n  careerPageUrl: text(\"career_page_url\").notNull(),\n  keywords: jsonb(\"keywords\").$type<string[]>().notNull(),\n  priority: text(\"priority\", { enum: [\"high\", \"medium\", \"low\"] }).default(\"medium\"),\n  status: text(\"status\", { enum: [\"active\", \"inactive\"] }).default(\"active\"),\n  checkIntervalMinutes: integer(\"check_interval_minutes\").default(1440),\n  lastCheckedAt: timestamp(\"last_checked_at\"),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const jobs = pgTable(\"jobs\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  title: text(\"title\").notNull(),\n  url: text(\"url\").notNull(),\n  description: text(\"description\"),\n  salary: text(\"salary\"),\n  requirements: jsonb(\"requirements\").$type<string[]>(),\n  matchedKeywords: jsonb(\"matched_keywords\").$type<string[]>().default([]),\n  dateFound: timestamp(\"date_found\").defaultNow(),\n  appliedAt: timestamp(\"applied_at\"),\n  status: text(\"status\", { enum: [\"New\", \"Seen\", \"Applied\", \"Archived\"] }).default(\"New\"),\n  priority: text(\"priority\", { enum: [\"high\", \"medium\", \"low\"] }).default(\"medium\"),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  lastCheckedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  dateFound: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type Company = typeof companies.$inferSelect;\nexport type Job = typeof jobs.$inferSelect;\n", "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n"],
  "mappings": "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",
  "names": ["express", "createClient", "supabaseUrl", "supabaseKey", "supabase", "app", "companies", "url", "jobs", "app", "express", "path"]
}
