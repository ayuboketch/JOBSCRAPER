{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nJobTracker is a full-stack web application for tracking job opportunities and company career pages. Users can add companies they're interested in, automatically scrape job listings from their career pages, and manage their job application pipeline. The application features automated job discovery through web scraping with keyword matching, user authentication, and a mobile-responsive interface built with React and shadcn/ui components.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool and development server\n\n**UI Library**: shadcn/ui components built on top of Radix UI primitives, providing a comprehensive set of accessible components including forms, dialogs, navigation, and data display elements\n\n**Styling**: Tailwind CSS with custom CSS variables for theming, supporting both light and dark modes with user preference persistence\n\n**State Management**: React Query (TanStack Query) for server state management, React Context for authentication and theme state, with local state managed through React hooks\n\n**Routing**: Wouter for lightweight client-side routing with support for protected routes and navigation state\n\n**Mobile-First Design**: Responsive layout with dedicated mobile navigation (bottom tabs) and desktop-friendly components, using a drawer-based navigation pattern\n\n## Backend Architecture\n\n**Runtime**: Node.js with Express.js framework for REST API endpoints\n\n**Language**: TypeScript with ES modules for type safety and modern JavaScript features\n\n**Database ORM**: Drizzle ORM for type-safe database operations with PostgreSQL as the target database\n\n**Authentication**: Supabase Auth for user authentication and session management with JWT tokens\n\n**API Design**: RESTful endpoints following standard HTTP methods and status codes, with middleware for authentication and error handling\n\n## Data Storage Solutions\n\n**Primary Database**: PostgreSQL (configured for Neon/Supabase) with the following schema:\n- Users table for authentication and profile data\n- Companies table for tracked companies with scraping configurations\n- Jobs table for discovered job opportunities with application status tracking\n\n**Schema Management**: Drizzle Kit for database migrations and schema evolution\n\n**Data Relationships**: Foreign key relationships between users, companies, and jobs with proper cascade handling\n\n## Authentication and Authorization\n\n**Provider**: Supabase Authentication system providing secure user registration, login, and session management\n\n**Token Management**: JWT tokens stored in localStorage with automatic inclusion in API requests via custom fetch wrapper\n\n**Protected Routes**: Authentication middleware on both client and server sides, with automatic redirects for unauthenticated users\n\n**User Context**: React Context provider for global authentication state management across the application\n\n## External Dependencies\n\n**UI Framework**: Radix UI primitives for accessible, unstyled components that form the foundation of the shadcn/ui component library\n\n**Database Provider**: Configured for Neon Database (PostgreSQL-compatible) with Supabase as the authentication and database service provider\n\n**Development Tools**: \n- Vite for fast development and optimized production builds\n- TypeScript for static type checking\n- Tailwind CSS for utility-first styling\n- React Query for efficient data fetching and caching\n\n**Web Scraping Infrastructure**: Playwright for automated browser automation and job listing extraction (referenced in attached assets), with support for dynamic content rendering\n\n**Build and Deployment**: ESBuild for server-side bundling with Node.js target, Vite for client-side bundling with optimized asset handling","size_bytes":3847},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\", \"Georgia\"],\n        mono: [\"var(--font-mono)\", \"Menlo\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2351},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/index_1756824228330.ts":{"content":"// server/index.ts - Updated for Vercel Cron\n\nimport * as dotenv from 'dotenv';\nimport 'dotenv/config';\nimport * as path from 'path';\ndotenv.config({ path: path.join(__dirname, '..', '.env') });\n\n// The rest of your imports\nimport { createClient } from '@supabase/supabase-js';\nimport cors from 'cors';\nimport express, { Request, RequestHandler } from 'express';\n// Remove: import * as cron from 'node-cron';  // <-- REMOVED node-cron\nimport { chromium, Page as PlaywrightPage } from 'playwright';\nimport { z } from 'zod';\nimport {\n  Company,\n  CompanyInsert,\n  DatabaseTables,\n  Job,\n  validateCompanyInsert\n} from '../types/database';\n\n/* ---------- Supabase ---------------------------------------------------- */\nconst supabaseUrl = process.env['SUPABASE_URL'] || process.env['EXPO_PUBLIC_SUPABASE_URL'];\nconst supabaseKey = process.env['SUPABASE_SERVICE_ROLE_KEY'] || process.env['EXPO_PUBLIC_SUPABASE_ANON_KEY'];\n\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error('Supabase URL or Service Role Key is missing from .env. Check server configuration.');\n}\nimport { Database } from '../types/database'; // <-- Ensure this type matches your Supabase schema\n\n// Make sure your Database type includes the correct tables and columns\nconst supabase = createClient<Database>(supabaseUrl, supabaseKey);\nconst GROQ_API_KEY = process.env['GROQ_API_KEY'] || process.env['EXPO_PUBLIC_GROQ_API_KEY'];\nconst GROQ_API_URL = process.env['GROQ_API_URL'] || 'https://api.groq.com/openai/v1';\nconst GROQ_MODEL = process.env['GROQ_MODEL'] || 'mixtral-8x7b-32768';\nconst OPENROUTER_API_KEY = process.env['OPEN_ROUTER_KEY'];\n\n/* ---------- Domain types now imported from database.ts -------------- */\n// Company and Job interfaces are now imported from types/database.ts\n// This ensures type safety with the actual database schema\n\n// Return type for scraping functions - DB columns plus transient fields\ninterface ScrapedJob {\n  id?: number;\n  title: string;\n  url: string;\n  matchedKeywords: string[];\n  dateFound: string;\n  description?: string;\n  companyId?: number;\n  status?: 'New' | 'Seen' | 'Applied' | 'Archived';\n  priority?: string;\n  salary?: string | null | undefined;\n  requirements?: string[] | null;\n  // Transient fields that callers can discard\n  companyNameTmp?: string;\n  applicationDeadlineTmp?: string | null; // Transient field for display only\n  duties?: string[];\n}\n\n/* ---------- Express app ------------------------------------------------- */\nconst app = express();\nconst PORT = Number(process.env['PORT']) || 3000; // FIXED: Convert to number\n\n// Enhanced CORS configuration\napp.use(cors({\n  origin: [\n    'http://localhost:8081', \n    'exp://192.168.100.88:8081', \n    'http://192.168.100.88:8081',\n    'http://localhost:3000',\n    /^exp:\\/\\/.*$/  // Allow all Expo development URLs\n  ],\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],\n  optionsSuccessStatus: 200\n}));\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Add request logging middleware\napp.use((req, res, next) => {\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\n  next();\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\napp.get('/api/health-detailed', (req, res) => {\n  res.json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    environment: process.env['NODE_ENV'],\n    port: PORT,\n    supabaseConnected: !!supabaseUrl && !!supabaseKey\n  });\n});\n\n// Add Vercel Cron webhook endpoint for manual triggering\napp.post('/api/cron/trigger', async (req, res) => {\n  try {\n    // Verify authorization (you can add a secret token check here)\n    const authHeader = req.headers.authorization;\n    if (authHeader !== `Bearer ${process.env['CRON_SECRET']}`) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // This endpoint can be used to manually trigger the same logic\n    // that runs in Vercel cron, useful for testing\n    const response = await fetch(`${process.env['VERCEL_URL'] || 'http://localhost:3000'}/api/cron/check-jobs`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env['CRON_SECRET']}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    const result = await response.json();\n    return res.json(result);\n  } catch (error: any) {\n    return res.status(500).json({ error: error.message });\n  }\n});\n\n/* ---------- Utility helpers -------------------------------------------- */\nconst extractCompanyName = (url: string): string => {\n  try {\n    const domain = new URL(url).hostname;\n    const parts = domain.replace('www.', '').split('.');\n    return parts[0] ?? 'Unknown Company';\n  } catch {\n    return 'Unknown Company';\n  }\n};\n\n// Auth middleware to extract user ID from JWT token\nconst authenticateUser = async (\n  req: Request,\n  res: express.Response,\n  next: express.NextFunction\n): Promise<void> => {\n  try {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      res.status(401).json({ error: 'No authorization token provided' });\n      return;\n    }\n\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    if (error || !user) {\n      res.status(401).json({ error: 'Invalid token' });\n      return;\n    }\n\n    // Add user ID to request object\n    (req as any).userId = user.id;\n    return next();\n  } catch (error) {\n    res.status(401).json({ error: 'Authentication failed' });\n    return;\n  }\n};\n\n// Function to detect and validate career page URLs\nconst findCareerPageUrl = async (baseUrl: string): Promise<string> => {\n  const commonPaths = [\n    '/careers', '/jobs', '/career', '/opportunities', '/positions',\n    '/job-openings', '/work-with-us', '/join-us', '/hiring', '/employment'\n  ];\n\n  for (const path of commonPaths) {\n    const testUrl = `${baseUrl}${path}`;\n    let browser;\n    try {\n      browser = await chromium.launch({ headless: true });\n      const page = await browser.newPage();\n      const response = await page.goto(testUrl, { waitUntil: 'domcontentloaded', timeout: 10000 });\n      \n      if (response && response.ok()) {\n        const hasJobContent = await page.evaluate(() => {\n          const content = document.body.textContent?.toLowerCase() || '';\n          const jobKeywords = [\n            'job', 'position', 'career', 'hiring', 'apply', \n            'opportunity', 'employment', 'vacancy', 'role'\n          ];\n          return jobKeywords.some(keyword => content.includes(keyword));\n        });\n        \n        if (hasJobContent) {\n          console.log(`Found valid career page: ${testUrl}`);\n          return testUrl;\n        }\n      }\n    } catch (error) {\n      console.log(`Failed to access ${testUrl}: ${error instanceof Error ? error.message : String(error)}`);\n    } finally {\n        if(browser) await browser.close();\n    }\n  }\n  \n  console.log(`No valid career page found, using fallback: ${baseUrl}/careers`);\n  return `${baseUrl}/careers`;\n};\n\nconst convertIntervalToMinutes = (interval: string | undefined): number => {\n  if (!interval) return 1440; // Default to 1 day\n\n  const parts = interval.trim().split(\" \");\n  const value = parts[0];\n  const unit = parts[1];\n\n  if (!value || !unit) return 1440;\n\n  const numValue = parseInt(value, 10);\n  if (isNaN(numValue)) return 1440;\n\n  switch (unit.toLowerCase()) {\n    case \"hour\": case \"hours\": return numValue * 60;\n    case \"day\": case \"days\": return numValue * 60 * 24;\n    case \"week\": case \"weeks\": return numValue * 60 * 24 * 7;\n    default: return 1440;\n  }\n};\n\n/* ---------- Scraping helpers (Enhanced with better error handling) ----- */\n// Export these functions so they can be used by Vercel cron\nasync function scrapeJobs(\n  page: PlaywrightPage,\n  keywords: string[],\n  companyName: string,\n  career_page_url: string\n): Promise<ScrapedJob[]> {\n  let jobs: ScrapedJob[] = [];\n  let apiJobs: any[] = [];\n\n  page.on('response', async (response) => {\n    try {\n      if (response.request().resourceType() === 'fetch' || response.request().resourceType() === 'xhr') {\n        const contentType = response.headers()['content-type'];\n        if (response.ok() && contentType && contentType.includes('application/json')) {\n          const json = await response.json();\n\n          const findJobsArray = (data: any): any[] | null => {\n            if (Array.isArray(data)) {\n              if (data.length > 0 && typeof data[0] === 'object' && data[0] !== null) {\n                const firstItem = data[0];\n                if (('title' in firstItem || 'jobTitle' in firstItem) && ('url' in firstItem || 'jobUrl' in firstItem)) {\n                  return data;\n                }\n              }\n            } else if (typeof data === 'object' && data !== null) {\n              for (const key in data) {\n                const potentialJobs = findJobsArray(data[key]);\n                if (potentialJobs) return potentialJobs;\n              }\n            }\n            return null;\n          };\n          const foundApiJobs = findJobsArray(json);\n          if (foundApiJobs) {\n            apiJobs = apiJobs.concat(foundApiJobs);\n          }\n        }\n      }\n    } catch (error) {\n       // console.warn(`Warning: Could not process response from ${response.url()}. It's likely not valid JSON.`);\n    }\n  });\n\n  try {\n    // REDUCED TIMEOUT: From 60000ms to 30000ms and changed waitUntil strategy\n    await page.goto(career_page_url, { \n      waitUntil: 'domcontentloaded', // Changed from 'networkidle' to 'domcontentloaded'\n      timeout: 30000 // Reduced from 60000\n    });\n    \n    // Wait for page to load but with shorter timeout\n    await page.waitForTimeout(3000); // Reduced from 5000\n    \n  } catch (error) {\n    console.log(`Failed to load ${career_page_url}, trying with basic navigation...`);\n    try {\n      // Fallback: try with even more basic navigation\n      await page.goto(career_page_url, { \n        waitUntil: 'load',\n        timeout: 15000 \n      });\n      await page.waitForTimeout(2000);\n    } catch (fallbackError) {\n      console.error(`Complete failure to load ${career_page_url}:`, fallbackError);\n      throw new Error(`Cannot access ${career_page_url}: ${fallbackError instanceof Error ? fallbackError.message : 'Unknown error'}`);\n    }\n  }\n\n  if (apiJobs.length > 0) {\n    console.log(`Found ${apiJobs.length} jobs via API for ${companyName}`);\n    const kwSet = new Set(keywords.map((k) => k.toLowerCase()));\n    const uniqueUrls = new Set<string>();\n\n    jobs = apiJobs\n      .map((job: any): ScrapedJob | null => {\n        const title = job.title || job.jobTitle || '';\n        const url = job.url || job.jobUrl || job.absolute_url || '';\n        if (!title || !url || uniqueUrls.has(url)) return null;\n\n        const description = job.description || job.jobDescription || '';\n        const salary = job.salary || null;\n        const applicationDeadline = job.applicationDeadline || null;\n        const requirements = job.requirements || null;\n        const matched = [...kwSet].filter(k => title.toLowerCase().includes(k));\n\n        uniqueUrls.add(url);\n        return {\n          title, url, companyNameTmp: companyName, matchedKeywords: [...new Set(matched)],\n          dateFound: new Date().toISOString(), description, salary,\n          applicationDeadlineTmp: applicationDeadline, requirements,\n        };\n      })\n      .filter((job): job is ScrapedJob => job !== null && (kwSet.size === 0 || job.matchedKeywords.length > 0));\n  } else {\n    console.log(`No API jobs found for ${companyName}, falling back to HTML scraping.`);\n    \n    try {\n      await page.evaluate(async () => {\n        for (let i = 0; i < 3; i++) { // Reduced from 5 to 3\n          window.scrollTo(0, document.body.scrollHeight);\n          await new Promise(resolve => setTimeout(resolve, 500)); // Reduced from 1000\n        }\n      });\n\n      jobs = await page.evaluate(({ kws, coName }) => {\n        const kwSet = new Set(kws.map((k: string) => k.toLowerCase()));\n        const seen = new Set<string>();\n        const htmlJobs: ScrapedJob[] = [];\n\n        document.querySelectorAll('a[href]').forEach((a) => {\n          const anchor = a as HTMLAnchorElement;\n          const title = (anchor.textContent || anchor.title || '').trim();\n          const url = anchor.href;\n          console.log({ title, url });\n\n          if (!title || !url || seen.has(url)) return;\n\n          const matched = [...kwSet].filter((k: string) => title.toLowerCase().includes(k));\n          if (kwSet.size === 0 || matched.length > 0) {\n            seen.add(url);\n            htmlJobs.push({\n              title, url, companyNameTmp: coName, matchedKeywords: [...new Set(matched)],\n              dateFound: new Date().toISOString(),\n            });\n          }\n        });\n        return htmlJobs;\n      }, { kws: keywords, coName: companyName });\n    } catch (evalError) {\n      console.log(`HTML scraping failed for ${companyName}, returning empty results`);\n    }\n  }\n\n  return jobs;\n}\n\nasync function cleanJobsWithAI(jobs: ScrapedJob[]): Promise<ScrapedJob[]> {\n  if (!OPENROUTER_API_KEY || jobs.length === 0) return jobs;\n  \n  const cleanedJobs: ScrapedJob[] = [];\n  for (const job of jobs) {\n    try {\n      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${OPENROUTER_API_KEY}`, 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          model: 'meta-llama/llama-3.2-3b-instruct:free',\n          messages: [{\n            role: 'user',\n            content: `Clean this job data. Fix spacing, extract duties/requirements:\\nTitle: ${job.title}\\nDescription: ${job.description || 'N/A'}\\n\\nReturn JSON only: {\"title\": \"Clean Title\", \"description\": \"Clean description\", \"duties\": [\"duty1\", \"duty2\"], \"requirements\": [\"req1\", \"req2\"]}`\n          }]\n        })\n      });\n      \n      const data = await response.json();\n      if (data.choices && data.choices[0] && data.choices[0].message) {\n        try {\n          const cleaned = JSON.parse(data.choices[0].message.content);\n          cleanedJobs.push({...job, ...cleaned});\n        } catch (e) {\n          console.error('AI cleanup failed to parse JSON:', e);\n          cleanedJobs.push(job);\n        }\n      } else {\n        cleanedJobs.push(job);\n      }\n    } catch (error) {\n      console.error('AI cleanup failed:', error);\n      cleanedJobs.push(job);\n    }\n  }\n  return cleanedJobs;\n}\n\nasync function scrapeWithoutAI(company: Company): Promise<ScrapedJob[]> {\n  console.log(`[SCRAPER] Scraping ${company.name} without AI...`);\n  const browser = await chromium.launch({ headless: false, args: ['--no-sandbox', '--disable-blink-features=AutomationControlled']});\n  const page = await browser.newPage();\n  \n  try {\n    await page.goto(company.career_page_url, { waitUntil: 'networkidle', timeout: 60000 });\n    \n    try {\n      await page.click('button:has-text(\"Accept\"), button:has-text(\"OK\"), button:has-text(\"Agree\"), [id*=\"cookie\"] button, [class*=\"cookie\"] button', { timeout: 3000 });\n      await page.waitForTimeout(2000);\n    } catch (e) {\n      console.log('[SCRAPER] No cookie banner found or failed to click');\n    }\n    \n    await page.evaluate(() => { for (let i = 0; i < 5; i++) window.scrollTo(0, document.body.scrollHeight); });\n    await page.waitForTimeout(5000);\n    \n    const jobsData = await page.evaluate((keywords) => {\n      const jobSelectors = [\n        'a[href*=\"job\"]', 'a[href*=\"career\"]', 'a[href*=\"position\"]', 'a[href*=\"role\"]',\n        'a[href*=\"apply\"]', '.job-title a', '.position a', '.career a', '[data-job] a',\n        'h1 a, h2 a, h3 a, h4 a'\n      ];\n      \n      const found: Omit<ScrapedJob, 'matchedKeywords' | 'dateFound' | 'companyId'>[] = [];\n      const seen = new Set<string>();\n      \n      jobSelectors.forEach(selector => {\n        document.querySelectorAll(selector).forEach((el: Element) => {\n          const anchor = el as HTMLAnchorElement;\n          const title = (anchor.textContent || anchor.innerText || '').trim();\n          const url = anchor.href;\n          \n          if (!title || !url || seen.has(url) || title.length < 3) return;\n          \n          const titleLower = title.toLowerCase();\n          const isJobRelated = ['engineer', 'developer', 'manager', 'intern', 'specialist', 'analyst', 'coordinator', 'assistant', 'director', 'lead']\n            .some(role => titleLower.includes(role)) || keywords.some((kw: string) => titleLower.includes(kw.toLowerCase()));\n          \n          if (isJobRelated) {\n            seen.add(url);\n            const parent = el.closest('div, li, tr, article, section') || el.parentElement;\n            const parentText = parent?.textContent || '';\n            const salaryMatch = parentText.match(/\\$[\\d,]+(?:\\s*-\\s*\\$[\\d,]+)?|\\d+k\\s*-\\s*\\d+k/i);\n            const deadlineMatch = parentText.match(/deadline|apply by|closes on[\\s:]*([^\\n\\r,]+)/i);\n            \n            found.push({\n              title,\n              url,\n              salary: salaryMatch ? salaryMatch[0] : null,\n              applicationDeadlineTmp: deadlineMatch?.[1]?.trim() ?? null,\n              description: parentText.substring(0, 200) + '...',\n              requirements: null\n            });\n          }\n        });\n      });\n      return found;\n    }, company.keywords);\n    \n    console.log(`[SCRAPER] Found ${jobsData.length} potential jobs for ${company.name}`);\n    \n    return jobsData.map((job): ScrapedJob => ({\n      ...job,\n      url: job.url?.startsWith('http') ? job.url : new URL(job.url, company.url).toString(),\n      companyNameTmp: company.name,\n      companyId: company.id,\n      dateFound: new Date().toISOString(),\n      status: 'New' as const,\n      priority: company.priority,\n      matchedKeywords: company.keywords.filter(keyword => job.title.toLowerCase().includes(keyword.toLowerCase())),\n    }));\n    \n  } catch (error) {\n    console.error(`[SCRAPER] Error scraping ${company.name}:`, error);\n    return [];\n  } finally {\n      await browser.close();\n  }\n}\n\n/* ---------- Rest of your existing code remains the same -------------- */\n// ... all other handlers, middleware, and routes remain exactly the same\n// Just remove the cron.schedule() section at the bottom\n\n/* ---------- Company mapping helpers ----------------------------------- */\nlet companyNameCache = new Map<number, string>();\n\nasync function getCompanyNames(): Promise<Map<number, string>> {\n  try {\n    const { data: companies, error } = await supabase.from('companies').select('id, name');\n    if (error) {\n      console.error('Error fetching company names:', error);\n      return companyNameCache;\n    }\n    \n    companyNameCache.clear();\n    (companies as { id: number; name: string }[] | undefined)?.forEach(company => { companyNameCache.set(company.id, company.name); });\n    return companyNameCache;\n  } catch (error) {\n    console.error('Failed to fetch company names:', error);\n    return companyNameCache;\n  }\n}\n\nfunction mapJobsWithCompanyNames(jobs: (Partial<Job> & { companyId: number })[], companyNames: Map<number, string>) {\n  return jobs.map(job => {\n    const companyName = companyNames.get(job.companyId) || 'Unknown Company';\n    return { ...job, companyName, company: { id: job.companyId, name: companyName } };\n  });\n}\n\n/* ---------- Route Handlers (Enhanced with better error handling) ------- */\nconst AddCompanyRequestSchema = z.object({\n  url: z.string().url('Invalid URL format'),\n  careerPageUrl: z.string().url('Invalid career page URL').optional(),\n  keywords: z.union([z.string(), z.array(z.string())]),\n  priority: z.enum(['high', 'medium', 'low']),\n  checkInterval: z.string(),\n});\n\nexport const addCompanyHandler: RequestHandler = async (req, res): Promise<void> => {\n  try {\n    const userId = (req as any).userId;\n    const validatedBody = AddCompanyRequestSchema.parse(req.body);\n    const { url, keywords, priority, checkInterval } = validatedBody;\n    let { careerPageUrl } = validatedBody;\n\n    const name = extractCompanyName(url);\n    const keywordsArray = typeof keywords === 'string' \n      ? keywords.split(',').map(kw => kw.trim()).filter(Boolean) \n      : keywords;\n\n    if (!careerPageUrl) {\n      careerPageUrl = await findCareerPageUrl(url);\n    }\n    \n    const companyInsertData: CompanyInsert = {\n      name, url, career_page_url: careerPageUrl, keywords: keywordsArray,\n      priority, status: 'active',\n      check_interval_minutes: convertIntervalToMinutes(checkInterval),\n      user_id: userId\n    };\n    const { data: company, error } = await supabase\n      .from('companies')\n      .insert([{ ...companyInsertData, created_at: new Date().toISOString(), user_id: userId }])\n      .select()\n      .single();\n      .onselect().single();\n \n    if (error || !company) {\n      res.status(500).json({ error: 'Failed to add company', detail: error?.message });\n      return;\n    }\n\n    let jobs: ScrapedJob[] = [];\n    try {\n      const browser = await chromium.launch({ headless: true });\n      const page = await browser.newPage();\n      jobs = await scrapeJobs(page, keywordsArray, name, careerPageUrl);\n      if (jobs.length === 0 && keywordsArray.length === 0) {\n        jobs = await scrapeWithoutAI(company as Company);\n      }\n      jobs = await cleanJobsWithAI(jobs);\n      await browser.close();\n\n      if (jobs.length > 0) {\n        const jobsToInsert = jobs.map(job => {\n          const { companyNameTmp, applicationDeadlineTmp, duties, ...dbJob } = job;\n          return { \n            ...dbJob, \n            companyId: company.id, \n            priority, \n            status: 'New', \n            matchedKeywords: job.matchedKeywords || [],\n            user_id: userId\n          };\n        });\n        const { error: jobError } = await supabase.from('jobs').insert(jobsToInsert);\n        if (jobError) console.error('Job insert error:', jobError.message);\n      }\n\n      const jobsForResponse = jobs.map(job => ({\n        ...job, id: job.id || Date.now() + Math.random(),\n        applicationDeadline: job.applicationDeadlineTmp\n      })) as (Partial<Job> & { companyId: number })[];\n\n      const companyNames = new Map([[company.id, name]]);\n      const mappedJobs = mapJobsWithCompanyNames(jobsForResponse, companyNames);\n      res.json({ success: true, company, jobsFound: jobs.length, jobs: mappedJobs });\n\n    } catch (err) {\n      console.error('Scraping error:', err);\n      res.json({ success: true, company, jobsFound: 0, jobs: [], warning: 'Company added, but job scraping failed.' });\n    }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({ success: false, error: 'Validation error', details: error.flatten() });\n      return;\n    }\n    console.error('Error in addCompanyHandler:', error);\n    res.status(500).json({ success: false, error: 'Internal server error', message: error instanceof Error ? error.message : 'Unknown error' });\n  }\n};\n\nconst getCompaniesHandler: RequestHandler = async (req, res) => {\n  try {\n    const userId = (req as any).userId;\n    const { data, error } = await supabase\n      .from('companies')\n      .select('*')\n      .eq('user_id', userId);\n    if (error) throw error;\n    res.json(data || []);\n  } catch (e: any) {\n    res.status(500).json({ success: false, error: e.message });\n  }\n};\n\nconst deleteCompanyHandler: RequestHandler = async (req, res) => {\n  try {\n    const userId = (req as any).userId;\n    const id = Number(req.params['id']);\n    \n    await supabase.from('jobs').delete()\n      .eq('companyId', id)\n      .eq('user_id', userId);\n    \n    const { error } = await supabase\n      .from('companies')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n    res.json({ success: true });\n  } catch (e: any) {\n    res.status(500).json({ success: false, error: e.message });\n  }\n};\n\nconst getJobsHandler: RequestHandler = async (req, res) => {\n  try {\n    const userId = (req as any).userId;\n    const { data: jobs, error } = await supabase\n      .from('jobs')\n      .select('*')\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n    \n    const companyNames = await getCompanyNames();\n    const typedJobs = (jobs || []).filter((j): j is Job & { companyId: number } => j.companyId !== null);\n    const jobsWithCompanyNames = mapJobsWithCompanyNames(typedJobs, companyNames);\n    \n    res.json(jobsWithCompanyNames);\n  } catch (e: any) {\n    res.status(500).json({ success: false, error: e.message });\n  }\n};\n\nconst deleteJobHandler: RequestHandler = async (req, res) => {\n  try {\n    const userId = (req as any).userId;\n    const id = Number(req.params['id']);\n    const { error } = await supabase\n      .from('jobs')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n    res.json({ success: true });\n  } catch (e: any) {\n    res.status(500).json({ success: false, error: e.message });\n  }\n};\n\nconst UpdatePriorityRequestSchema = z.object({\n  priority: z.enum(['high', 'medium', 'low']),\n});\n\nconst updateCompanyPriorityHandler: RequestHandler = async (req, res) => {\n  try {\n    const id = Number(req.params['id']);\n    const { priority } = UpdatePriorityRequestSchema.parse(req.body);\n\n    await supabase.from('companies').update({ priority }).eq('id', id);\n    await supabase.from('jobs').update({ priority }).eq('companyId', id);\n\n    return res.json({ success: true });\n  } catch (e: any) {\n    if (e instanceof z.ZodError) {\n      return res.status(400).json({ success: false, error: 'Validation error', details: e.flatten() });\n    }\n    return res.status(500).json({ success: false, error: e.message });\n  }\n};\n\nconst refreshAllCompaniesHandler = async (_req: Request, res: express.Response): Promise<void> => {\n  try {\n    const { data: companies } = await supabase.from('companies').select('*').eq('status', 'active');\n    \n    if (!companies || companies.length === 0) {\n      res.json({ success: true, message: 'No active companies to refresh', newJobs: 0 }); return;\n    }\n\n    let totalNewJobs = 0;\n    const browser = await chromium.launch({ headless: true });\n    \n    for (const company of companies) {\n      try {\n        const page = await browser.newPage();\n        let foundJobs = await scrapeJobs(page, company.keywords, company.name, company.career_page_url);\n        if (foundJobs.length === 0) foundJobs = await scrapeWithoutAI(company);\n        foundJobs = await cleanJobsWithAI(foundJobs);\n        \n        const { data: existingJobs } = await supabase.from('jobs').select('url').eq('companyId', company.id);\n        const existingUrls = new Set(existingJobs?.map(e => e.url));\n        const newJobs = foundJobs.filter(f => f.url && !existingUrls.has(f.url));\n        \n        if (newJobs.length > 0) {\n          const jobsToInsert = newJobs.map(job => {\n            const { companyNameTmp, applicationDeadlineTmp, duties, ...dbJob } = job;\n            return { ...dbJob, companyId: company.id, priority: company.priority, status: 'New' };\n          });\n          await supabase.from('jobs').insert(jobsToInsert);\n          totalNewJobs += newJobs.length;\n        }\n        \n        await supabase.from('companies').update({ last_checked_at: new Date().toISOString() }).eq('id', company.id);\n        await page.close();\n      } catch (err) {\n        console.error(`Error refreshing ${company.name}:`, err);\n      }\n    }\n    \n    await browser.close();\n    res.json({ success: true, newJobs: totalNewJobs });\n  } catch (error: any) {\n    console.error('Refresh error:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n};\n\n/* ---------- Routes Registration ---------------------------------------- */\napp.use('/api/companies', authenticateUser);\napp.use('/api/jobs', authenticateUser);\napp.post('/api/companies', addCompanyHandler);\napp.post('/api/companies/refresh', refreshAllCompaniesHandler);\napp.get('/api/companies', getCompaniesHandler);\napp.delete('/api/companies/:id', deleteCompanyHandler);\napp.put('/api/companies/:id/priority', updateCompanyPriorityHandler);\napp.get('/api/jobs', getJobsHandler);\napp.delete('/api/jobs/:id', deleteJobHandler);\n\n// Debug and utility endpoints\napp.get('/api/debug/schedule', async (req, res) => {\n  try {\n    const { data: companies } = await supabase\n      .from('companies')\n      .select('id, name, last_checked_at, check_interval_minutes, status');\n      \n    const now = new Date();\n    const schedule = companies?.map(company => {\n      const lastChecked = company.last_checked_at ? new Date(company.last_checked_at) : null;\n      const intervalMinutes = company.check_interval_minutes || 1440;\n      const nextCheck = lastChecked ? \n        new Date(lastChecked.getTime() + (intervalMinutes * 60 * 1000)) : \n        new Date();\n      \n      const isDue = now >= nextCheck;\n      const minutesUntilNext = Math.ceil((nextCheck.getTime() - now.getTime()) / (1000 * 60));\n      \n      return {\n        name: company.name,\n        status: company.status,\n        lastChecked: lastChecked?.toLocaleString() || 'Never',\n        intervalHours: Math.round(intervalMinutes / 60),\n        nextCheck: nextCheck.toLocaleString(),\n        isDue,\n        minutesUntilNext: isDue ? 0 : minutesUntilNext\n      };\n    }) || [];\n\n    res.json({ \n      currentTime: now.toLocaleString(),\n      companies: schedule \n    });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.get('/api/companies/schedule', async (req, res) => {\n  try {\n    const { data: companies, error } = await supabase\n      .from('companies')\n      .select('id, name, last_checked_at, check_interval_minutes, status')\n      .eq('status', 'active');\n      \n    if (error) throw error;\n\n    const now = new Date();\n    const schedule = companies?.map(company => {\n      const lastChecked = company.last_checked_at ? new Date(company.last_checked_at) : null;\n      const intervalMinutes = company.check_interval_minutes || 1440;\n      const nextCheck = lastChecked ? \n        new Date(lastChecked.getTime() + (intervalMinutes * 60 * 1000)) : \n        new Date();\n      \n      const isDue = now >= nextCheck;\n      const timeUntilNext = isDue ? 0 : Math.ceil((nextCheck.getTime() - now.getTime()) / (1000 * 60));\n      \n      return {\n        id: company.id,\n        name: company.name,\n        lastChecked: lastChecked?.toISOString() || 'Never',\n        intervalMinutes,\n        nextCheck: nextCheck.toISOString(),\n        isDue,\n        minutesUntilNext: timeUntilNext\n      };\n    }) || [];\n\n    res.json({ schedule, currentTime: now.toISOString() });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.post('/api/jobs/:id/apply', async (req, res) => {\n  const { error } = await supabase\n    .from('jobs')\n    .update({ status: 'Applied', applied_at: new Date().toISOString() })\n    .eq('id', req.params.id);\n  res.json({ success: !error });\n});\n\napp.post('/api/companies/:id/check-now', async (req, res): Promise<void> => {\n  try {\n    const companyId = Number(req.params.id);\n    const { data: company, error } = await supabase\n      .from('companies')\n      .select('*')\n      .eq('id', companyId)\n      .single();\n      \n    if (error || !company) {\n      res.status(404).json({ success: false, error: 'Company not found' });\n      return;\n    }\n\n    console.log(`[MANUAL] Manual check requested for ${company.name}`);\n    \n    let browser;\n    try {\n      browser = await chromium.launch({ headless: true });\n      const page = await browser.newPage();\n      await page.setExtraHTTPHeaders({ 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36' });\n      \n      let foundJobs = await scrapeJobs(page, company.keywords, company.name, company.career_page_url);\n      if (foundJobs.length === 0) {\n        foundJobs = await scrapeWithoutAI(company);\n      }\n\n      const { data: existingJobs } = await supabase.from('jobs').select('url').eq('companyId', company.id);\n      const existingUrls = new Set(existingJobs?.map(e => e.url));\n      const newJobs = foundJobs.filter(f => f.url && !existingUrls.has(f.url));\n      \n      if (newJobs.length > 0) {\n        const jobsToInsert = newJobs.map(job => {\n          const { companyNameTmp, applicationDeadlineTmp, duties, ...dbJob } = job;\n          return { ...dbJob, companyId: company.id, priority: company.priority, status: 'New' };\n        });\n        await supabase.from('jobs').insert(jobsToInsert);\n      }\n      \n      await supabase.from('companies').update({ \n        last_checked_at: new Date().toISOString() \n      }).eq('id', company.id);\n      \n      res.json({ \n        success: true, \n        company: company.name,\n        newJobs: newJobs.length,\n        totalJobs: foundJobs.length \n      });\n      \n    } finally {\n      if (browser) await browser.close();\n    }\n  } catch (error: any) {\n    console.error('[MANUAL] Error in manual check:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n/* ---------- Error handling middleware ---------------------------------- */\napp.use((err: any, req: Request, res: express.Response, next: express.NextFunction) => {\n  console.error('Unhandled error:', err);\n  res.status(500).json({ success: false, error: 'Internal server error' });\n});\n\n/* ---------- Server startup ------------------------------------ */\nif (process.env['NODE_ENV'] !== 'test') {\n  app.listen(PORT, '0.0.0.0', () => {\n    console.log(`Server running on http://0.0.0.0:${PORT}`);\n    console.log(`Mobile access: http://192.168.100.88:${PORT}`); \n    console.log(`Health check: http://192.168.100.88:${PORT}/health`);\n    console.log('Note: Cron jobs are now handled by Vercel. Deploy to enable automatic job checking.');\n  });\n}\n\nexport { app, cleanJobsWithAI, scrapeJobs, scrapeWithoutAI, type ScrapedJob };\n","size_bytes":33903},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertCompanySchema } from \"@shared/schema\";\nimport { createClient } from '@supabase/supabase-js';\nimport { z } from \"zod\";\nimport bcrypt from 'bcrypt';\n\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// Auth middleware\nconst authenticateUser = async (req: any, res: any, next: any) => {\n  try {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({ error: 'No authorization token provided' });\n    }\n\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    if (error || !user) {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n\n    req.userId = user.id;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { email, password, fullName } = insertUserSchema.parse(req.body);\n      \n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            full_name: fullName\n          }\n        }\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      res.json({ user: data.user, session: data.session });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Validation error', details: error.flatten() });\n      }\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      res.json({ user: data.user, session: data.session });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/auth/logout', authenticateUser, async (req, res) => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Companies routes\n  app.get('/api/companies', authenticateUser, async (req: any, res) => {\n    try {\n      const companies = await storage.getCompanies(req.userId);\n      res.json(companies);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/companies', authenticateUser, async (req: any, res) => {\n    try {\n      const companyData = {\n        ...req.body,\n        userId: req.userId,\n      };\n      \n      // Use the existing backend logic for adding companies\n      const response = await fetch(`${process.env.BACKEND_URL || 'http://localhost:8000'}/api/companies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': req.headers.authorization\n        },\n        body: JSON.stringify(companyData)\n      });\n      \n      const result = await response.json();\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete('/api/companies/:id', authenticateUser, async (req: any, res) => {\n    try {\n      await storage.deleteCompany(parseInt(req.params.id), req.userId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put('/api/companies/:id/priority', authenticateUser, async (req: any, res) => {\n    try {\n      const { priority } = req.body;\n      await storage.updateCompanyPriority(parseInt(req.params.id), priority);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Jobs routes\n  app.get('/api/jobs', authenticateUser, async (req: any, res) => {\n    try {\n      const jobs = await storage.getJobs(req.userId);\n      res.json(jobs);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete('/api/jobs/:id', authenticateUser, async (req: any, res) => {\n    try {\n      await storage.deleteJob(parseInt(req.params.id), req.userId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/jobs/:id/apply', authenticateUser, async (req: any, res) => {\n    try {\n      await storage.updateJobStatus(parseInt(req.params.id), 'Applied', new Date().toISOString());\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Stats route\n  app.get('/api/stats', authenticateUser, async (req: any, res) => {\n    try {\n      const [companies, jobs] = await Promise.all([\n        storage.getCompanies(req.userId),\n        storage.getJobs(req.userId)\n      ]);\n\n      const stats = {\n        trackedCompanies: companies.length,\n        totalJobs: jobs.length,\n        searchedJobs: jobs.filter(job => job.matchedKeywords && job.matchedKeywords.length > 0).length,\n        appliedJobs: jobs.filter(job => job.status === 'Applied').length,\n        recentJobs: jobs.filter(job => {\n          const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n          return new Date(job.dateFound) > dayAgo;\n        }).length\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6073},"server/storage.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport type { User, InsertUser, Company, Job } from \"@shared/schema\";\nimport { Database } from '../types/database';\n\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\n\nconst supabase = createClient<Database>(supabaseUrl, supabaseKey);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Companies\n  getCompanies(userId: string): Promise<Company[]>;\n  createCompany(company: any): Promise<Company>;\n  deleteCompany(id: number, userId: string): Promise<void>;\n  updateCompanyPriority(id: number, priority: string): Promise<void>;\n  \n  // Jobs\n  getJobs(userId: string): Promise<Job[]>;\n  deleteJob(id: number, userId: string): Promise<void>;\n  updateJobStatus(id: number, status: string, appliedAt?: string): Promise<void>;\n}\n\nexport class SupabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) return undefined;\n    return data as User;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('email', email)\n      .single();\n    \n    if (error) return undefined;\n    return data as User;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const { data, error } = await supabase\n      .from('users')\n      .insert(user as any)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as User;\n  }\n\n  async getCompanies(userId: string): Promise<Company[]> {\n    const { data, error } = await supabase\n      .from('companies')\n      .select('*')\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n    return (data || []) as Company[];\n  }\n\n  async createCompany(company: any): Promise<Company> {\n    const { data, error } = await supabase\n      .from('companies')\n      .insert(company)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as Company;\n  }\n\n  async deleteCompany(id: number, userId: string): Promise<void> {\n    // First delete associated jobs\n    await supabase\n      .from('jobs')\n      .delete()\n      .eq('company_id', id)\n      .eq('user_id', userId);\n    \n    // Then delete company\n    const { error } = await supabase\n      .from('companies')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n  }\n\n  async updateCompanyPriority(id: number, priority: string): Promise<void> {\n    const { error } = await supabase\n      .from('companies')\n      .update({ priority } as any)\n      .eq('id', id);\n    \n    if (error) throw error;\n  }\n\n  async getJobs(userId: string): Promise<Job[]> {\n    const { data, error } = await supabase\n      .from('jobs')\n      .select('*')\n      .eq('user_id', userId)\n      .order('date_found', { ascending: false });\n    \n    if (error) throw error;\n    return (data || []) as Job[];\n  }\n\n  async deleteJob(id: number, userId: string): Promise<void> {\n    const { error } = await supabase\n      .from('jobs')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', userId);\n    \n    if (error) throw error;\n  }\n\n  async updateJobStatus(id: number, status: string, appliedAt?: string): Promise<void> {\n    const updateData: any = { status };\n    if (appliedAt) updateData.applied_at = appliedAt;\n    \n    const { error } = await supabase\n      .from('jobs')\n      .update(updateData as any)\n      .eq('id', id);\n    \n    if (error) throw error;\n  }\n}\n\nexport const storage = new SupabaseStorage();\n","size_bytes":3824},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const companies = pgTable(\"companies\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  name: text(\"name\").notNull(),\n  url: text(\"url\").notNull(),\n  careerPageUrl: text(\"career_page_url\").notNull(),\n  keywords: jsonb(\"keywords\").$type<string[]>().notNull(),\n  priority: text(\"priority\", { enum: [\"high\", \"medium\", \"low\"] }).default(\"medium\"),\n  status: text(\"status\", { enum: [\"active\", \"inactive\"] }).default(\"active\"),\n  checkIntervalMinutes: integer(\"check_interval_minutes\").default(1440),\n  lastCheckedAt: timestamp(\"last_checked_at\"),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const jobs = pgTable(\"jobs\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  title: text(\"title\").notNull(),\n  url: text(\"url\").notNull(),\n  description: text(\"description\"),\n  salary: text(\"salary\"),\n  requirements: jsonb(\"requirements\").$type<string[]>(),\n  matchedKeywords: jsonb(\"matched_keywords\").$type<string[]>().default([]),\n  dateFound: timestamp(\"date_found\").defaultNow(),\n  appliedAt: timestamp(\"applied_at\"),\n  status: text(\"status\", { enum: [\"New\", \"Seen\", \"Applied\", \"Archived\"] }).default(\"New\"),\n  priority: text(\"priority\", { enum: [\"high\", \"medium\", \"low\"] }).default(\"medium\"),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  lastCheckedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  dateFound: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type Company = typeof companies.$inferSelect;\nexport type Job = typeof jobs.$inferSelect;\n","size_bytes":2673},"types/database.ts":{"content":"export interface Database {\n  public: {\n    Tables: {\n      companies: {\n        Row: {\n          id: number;\n          name: string;\n          url: string;\n          career_page_url: string;\n          keywords: string[];\n          priority: 'high' | 'medium' | 'low';\n          status: 'active' | 'inactive';\n          check_interval_minutes: number;\n          last_checked_at: string | null;\n          user_id: string;\n          created_at: string;\n        };\n        Insert: {\n          name: string;\n          url: string;\n          career_page_url: string;\n          keywords: string[];\n          priority?: 'high' | 'medium' | 'low';\n          status?: 'active' | 'inactive';\n          check_interval_minutes?: number;\n          user_id: string;\n        };\n        Update: {\n          name?: string;\n          url?: string;\n          career_page_url?: string;\n          keywords?: string[];\n          priority?: 'high' | 'medium' | 'low';\n          status?: 'active' | 'inactive';\n          check_interval_minutes?: number;\n          last_checked_at?: string | null;\n        };\n      };\n      jobs: {\n        Row: {\n          id: number;\n          title: string;\n          url: string;\n          description: string | null;\n          salary: string | null;\n          requirements: string[] | null;\n          matchedKeywords: string[];\n          dateFound: string;\n          appliedAt: string | null;\n          status: 'New' | 'Seen' | 'Applied' | 'Archived';\n          priority: 'high' | 'medium' | 'low';\n          companyId: number;\n          user_id: string;\n          created_at: string;\n        };\n        Insert: {\n          title: string;\n          url: string;\n          description?: string | null;\n          salary?: string | null;\n          requirements?: string[] | null;\n          matchedKeywords?: string[];\n          status?: 'New' | 'Seen' | 'Applied' | 'Archived';\n          priority?: 'high' | 'medium' | 'low';\n          companyId: number;\n          user_id: string;\n        };\n        Update: {\n          title?: string;\n          url?: string;\n          description?: string | null;\n          salary?: string | null;\n          requirements?: string[] | null;\n          matchedKeywords?: string[];\n          appliedAt?: string | null;\n          status?: 'New' | 'Seen' | 'Applied' | 'Archived';\n          priority?: 'high' | 'medium' | 'low';\n        };\n      };\n    };\n  };\n}\n\nexport type Company = Database['public']['Tables']['companies']['Row'];\nexport type CompanyInsert = Database['public']['Tables']['companies']['Insert'];\nexport type Job = Database['public']['Tables']['jobs']['Row'];\nexport type JobInsert = Database['public']['Tables']['jobs']['Insert'];\n\nexport interface DatabaseTables {\n  companies: Company;\n  jobs: Job;\n}\n\nexport function validateCompanyInsert(data: any): CompanyInsert {\n  return data;\n}\n","size_bytes":2848},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { ThemeProvider } from \"@/hooks/use-theme\";\n\n// Layout components\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { SideDrawer } from \"@/components/layout/side-drawer\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\n\n// Pages\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AddCompany from \"@/pages/add-company\";\nimport JobDetails from \"@/pages/job-details\";\nimport JobsList from \"@/pages/jobs-list\";\nimport TrackedCompanies from \"@/pages/tracked-companies\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedApp() {\n  const { user, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<'dashboard' | 'jobs' | 'settings'>('dashboard');\n  \n  // Update active tab based on current location\n  useEffect(() => {\n    if (location === '/' || location.startsWith('/job/') || location.startsWith('/add-company') || location.startsWith('/companies')) {\n      setActiveTab('dashboard');\n    } else if (location.startsWith('/jobs')) {\n      setActiveTab('jobs');\n    } else if (location.startsWith('/settings')) {\n      setActiveTab('settings');\n    }\n  }, [location]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Switch>\n        <Route path=\"/signup\" component={Signup} />\n        <Route path=\"/login\" component={Login} />\n        <Route>\n          <Redirect to=\"/login\" />\n        </Route>\n      </Switch>\n    );\n  }\n\n  const handleNavigate = (view: string) => {\n    setIsDrawerOpen(false);\n    if (view === 'settings') {\n      setLocation('/settings');\n    }\n  };\n\n  const handleTabChange = (tab: 'dashboard' | 'jobs' | 'settings') => {\n    switch (tab) {\n      case 'dashboard':\n        setLocation('/');\n        break;\n      case 'jobs':\n        setLocation('/jobs');\n        break;\n      case 'settings':\n        setLocation('/settings');\n        break;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <TopNavigation \n        onMenuClick={() => setIsDrawerOpen(true)}\n        onLogoClick={() => setLocation('/')}\n      />\n      \n      <SideDrawer\n        isOpen={isDrawerOpen}\n        onClose={() => setIsDrawerOpen(false)}\n        onNavigate={handleNavigate}\n      />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/add-company\" component={AddCompany} />\n          <Route path=\"/job/:id\" component={JobDetails} />\n          <Route path=\"/jobs\" component={JobsList} />\n          <Route path=\"/companies\" component={TrackedCompanies} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      \n      <BottomNavigation \n        activeTab={activeTab}\n        onTabChange={handleTabChange}\n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <AuthProvider>\n            <AuthenticatedApp />\n            <Toaster />\n          </AuthProvider>\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3981},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(221.2 83.2% 53.3%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(224.3 76.3% 94.1%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n.hide-scrollbar {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.hide-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n\n@keyframes slideInFromLeft {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n.slide-in-left {\n  animation: slideInFromLeft 0.3s ease-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n.status-indicator {\n  position: relative;\n}\n\n.status-indicator::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background: currentColor;\n  opacity: 0.3;\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 0.3;\n  }\n  70% {\n    transform: translate(-50%, -50%) scale(1.4);\n    opacity: 0;\n  }\n  100% {\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 0;\n  }\n}\n","size_bytes":2925},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/company-card.tsx":{"content":"import { Trash2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Company } from '@/lib/api';\n\ninterface CompanyCardProps {\n  company: Company;\n  jobCount?: number;\n  onDelete: () => void;\n}\n\nexport function CompanyCard({ company, jobCount = 0, onDelete }: CompanyCardProps) {\n  const formatInterval = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    \n    if (days > 0) return `${days} day${days === 1 ? '' : 's'}`;\n    if (hours > 0) return `${hours} hour${hours === 1 ? '' : 's'}`;\n    return `${minutes} minute${minutes === 1 ? '' : 's'}`;\n  };\n\n  const formatLastChecked = (dateStr: string | null) => {\n    if (!dateStr) return 'Never';\n    \n    const date = new Date(dateStr);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffHours < 1) return 'Just now';\n    if (diffHours < 24) return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    if (diffDays === 1) return '1 day ago';\n    return `${diffDays} days ago`;\n  };\n\n  return (\n    <Card data-testid={`card-company-${company.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-medium text-foreground mb-1\">{company.name}</h3>\n            <p className=\"text-sm text-muted-foreground mb-2\">{company.careerPageUrl}</p>\n            <div className=\"flex items-center space-x-4 text-xs text-muted-foreground mb-3\">\n              <span>Keywords: {company.keywords.join(', ')}</span>\n              <span>•</span>\n              <span>Check: {formatInterval(company.checkIntervalMinutes)}</span>\n            </div>\n            <div className=\"flex items-center space-x-4 text-xs\">\n              <span className=\"text-chart-2\">{jobCount} jobs found</span>\n              <span className=\"text-muted-foreground\">\n                Last checked: {formatLastChecked(company.lastCheckedAt)}\n              </span>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onDelete}\n            data-testid={`button-delete-company-${company.id}`}\n            className=\"p-2 text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2618},"client/src/components/job-card.tsx":{"content":"import { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Job } from '@/lib/api';\n\ninterface JobCardProps {\n  job: Job;\n  onClick: () => void;\n  variant?: 'default' | 'horizontal';\n}\n\nexport function JobCard({ job, onClick, variant = 'default' }: JobCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'New': return 'bg-chart-1 text-white';\n      case 'Applied': return 'bg-chart-4 text-white';\n      case 'Seen': return 'bg-chart-2 text-white';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffHours < 1) return 'Found just now';\n    if (diffHours < 24) return `Found ${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    if (diffDays === 1) return 'Found 1 day ago';\n    return `Found ${diffDays} days ago`;\n  };\n\n  if (variant === 'horizontal') {\n    return (\n      <Card \n        className=\"cursor-pointer hover:bg-accent transition-colors flex-shrink-0\"\n        style={{ width: '280px' }}\n        onClick={onClick}\n        data-testid={`card-job-${job.id}`}\n      >\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <h3 className=\"font-medium text-foreground line-clamp-2\">{job.title}</h3>\n            <Badge className={`text-xs ml-2 ${getStatusColor(job.status)}`}>\n              {job.status}\n            </Badge>\n          </div>\n          <p className=\"text-sm text-muted-foreground mb-2\">{job.companyName}</p>\n          <p className=\"text-xs text-muted-foreground\">{formatDate(job.dateFound)}</p>\n          {job.matchedKeywords && job.matchedKeywords.length > 0 && (\n            <div className=\"flex flex-wrap gap-1 mt-2\">\n              {job.matchedKeywords.slice(0, 3).map((keyword, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {keyword}\n                </Badge>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card \n      className=\"cursor-pointer hover:bg-accent transition-colors\"\n      onClick={onClick}\n      data-testid={`card-job-${job.id}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <h3 className=\"font-medium text-foreground\">{job.title}</h3>\n          <Badge className={`text-xs ${getStatusColor(job.status)}`}>\n            {job.status}\n          </Badge>\n        </div>\n        <p className=\"text-sm text-muted-foreground mb-2\">\n          {job.companyName} {job.salary && `• ${job.salary}`}\n        </p>\n        <p className=\"text-xs text-muted-foreground mb-3\">{formatDate(job.dateFound)}</p>\n        {job.matchedKeywords && job.matchedKeywords.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {job.matchedKeywords.map((keyword, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                {keyword}\n              </Badge>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3373},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { authApi } from '@/lib/api';\n\ninterface User {\n  id: string;\n  email: string;\n  fullName?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  signup: (email: string, password: string, fullName: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('supabase_token');\n    const userData = localStorage.getItem('user_data');\n    \n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        localStorage.removeItem('supabase_token');\n        localStorage.removeItem('user_data');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const { user, session } = await authApi.login(email, password);\n    setUser(user);\n    localStorage.setItem('supabase_token', session.access_token);\n    localStorage.setItem('user_data', JSON.stringify(user));\n  };\n\n  const signup = async (email: string, password: string, fullName: string) => {\n    const { user, session } = await authApi.signup(email, password, fullName);\n    setUser(user);\n    localStorage.setItem('supabase_token', session.access_token);\n    localStorage.setItem('user_data', JSON.stringify(user));\n  };\n\n  const logout = async () => {\n    await authApi.logout();\n    setUser(null);\n    localStorage.removeItem('supabase_token');\n    localStorage.removeItem('user_data');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, signup, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2200},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | null>(null);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme) {\n      setThemeState(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n  };\n\n  const toggleTheme = () => {\n    setThemeState(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1303},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface AuthResponse {\n  user: any;\n  session: any;\n}\n\nexport interface Company {\n  id: number;\n  name: string;\n  url: string;\n  careerPageUrl: string;\n  keywords: string[];\n  priority: 'high' | 'medium' | 'low';\n  status: 'active' | 'inactive';\n  checkIntervalMinutes: number;\n  lastCheckedAt: string | null;\n  userId: string;\n  createdAt: string;\n}\n\nexport interface Job {\n  id: number;\n  title: string;\n  url: string;\n  description?: string;\n  salary?: string;\n  requirements?: string[];\n  matchedKeywords: string[];\n  dateFound: string;\n  appliedAt?: string;\n  status: 'New' | 'Seen' | 'Applied' | 'Archived';\n  priority: 'high' | 'medium' | 'low';\n  companyId: number;\n  userId: string;\n  companyName?: string;\n}\n\nexport interface Stats {\n  trackedCompanies: number;\n  totalJobs: number;\n  searchedJobs: number;\n  appliedJobs: number;\n  recentJobs: number;\n}\n\n// Auth API\nexport const authApi = {\n  signup: async (email: string, password: string, fullName: string): Promise<AuthResponse> => {\n    const res = await apiRequest('POST', '/api/auth/signup', { email, password, fullName });\n    return res.json();\n  },\n  \n  login: async (email: string, password: string): Promise<AuthResponse> => {\n    const res = await apiRequest('POST', '/api/auth/login', { email, password });\n    return res.json();\n  },\n  \n  logout: async (): Promise<void> => {\n    await apiRequest('POST', '/api/auth/logout');\n  }\n};\n\n// Companies API\nexport const companiesApi = {\n  getAll: async (): Promise<Company[]> => {\n    const res = await apiRequest('GET', '/api/companies');\n    return res.json();\n  },\n  \n  create: async (data: {\n    url: string;\n    careerPageUrl?: string;\n    keywords: string;\n    priority: 'high' | 'medium' | 'low';\n    checkInterval: string;\n  }): Promise<any> => {\n    const res = await apiRequest('POST', '/api/companies', data);\n    return res.json();\n  },\n  \n  delete: async (id: number): Promise<void> => {\n    await apiRequest('DELETE', `/api/companies/${id}`);\n  },\n  \n  updatePriority: async (id: number, priority: string): Promise<void> => {\n    await apiRequest('PUT', `/api/companies/${id}/priority`, { priority });\n  }\n};\n\n// Jobs API\nexport const jobsApi = {\n  getAll: async (): Promise<Job[]> => {\n    const res = await apiRequest('GET', '/api/jobs');\n    return res.json();\n  },\n  \n  delete: async (id: number): Promise<void> => {\n    await apiRequest('DELETE', `/api/jobs/${id}`);\n  },\n  \n  apply: async (id: number): Promise<void> => {\n    await apiRequest('POST', `/api/jobs/${id}/apply`);\n  }\n};\n\n// Stats API\nexport const statsApi = {\n  get: async (): Promise<Stats> => {\n    const res = await apiRequest('GET', '/api/stats');\n    return res.json();\n  }\n};\n","size_bytes":2739},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/add-company.tsx":{"content":"import { useState } from 'react';\nimport { ArrowLeft, Check, Loader2 } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { companiesApi } from '@/lib/api';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AddCompany() {\n  const [, setLocation] = useLocation();\n  const [url, setUrl] = useState('');\n  const [keywords, setKeywords] = useState('');\n  const [priority, setPriority] = useState<'high' | 'medium' | 'low'>('medium');\n  const [checkInterval, setCheckInterval] = useState('1 day');\n  const [scrapingStatus, setScrapingStatus] = useState<{\n    isActive: boolean;\n    step: number;\n    jobsFound: number;\n  }>({ isActive: false, step: 0, jobsFound: 0 });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const addCompanyMutation = useMutation({\n    mutationFn: companiesApi.create,\n    onSuccess: (data) => {\n      toast({\n        title: \"Company added successfully!\",\n        description: `Found ${data.jobsFound || 0} jobs for ${data.company?.name}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/jobs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      \n      setTimeout(() => {\n        setLocation('/');\n      }, 2000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to add company\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n      setScrapingStatus({ isActive: false, step: 0, jobsFound: 0 });\n    }\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!url.trim() || !keywords.trim()) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setScrapingStatus({ isActive: true, step: 1, jobsFound: 0 });\n    \n    // Simulate progress steps\n    const progressSteps = [\n      { step: 1, delay: 1000, message: \"Validating URL\" },\n      { step: 2, delay: 2000, message: \"Scraping job listings\" },\n      { step: 3, delay: 3000, message: \"Processing results\" },\n      { step: 4, delay: 1000, message: \"Saving to database\" },\n    ];\n\n    for (const { step, delay } of progressSteps) {\n      setTimeout(() => {\n        setScrapingStatus(prev => ({ ...prev, step }));\n      }, delay);\n    }\n\n    addCompanyMutation.mutate({\n      url: url.trim(),\n      keywords: keywords.trim(),\n      priority,\n      checkInterval\n    });\n  };\n\n  const progressSteps = [\n    { id: 1, label: \"Validating URL\" },\n    { id: 2, label: \"Scraping job listings\" },\n    { id: 3, label: \"Processing results\" },\n    { id: 4, label: \"Saving to database\" },\n  ];\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <div className=\"flex items-center mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation('/')}\n          data-testid=\"button-back\"\n          className=\"mr-3\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-bold text-foreground\">Add Company</h1>\n      </div>\n      \n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"url\" className=\"block text-sm font-medium text-foreground mb-1\">\n                Company Career Page URL\n              </Label>\n              <Input\n                id=\"url\"\n                type=\"url\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                placeholder=\"https://company.com/careers\"\n                required\n                data-testid=\"input-company-url\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"keywords\" className=\"block text-sm font-medium text-foreground mb-1\">\n                Keywords (comma separated)\n              </Label>\n              <Input\n                id=\"keywords\"\n                type=\"text\"\n                value={keywords}\n                onChange={(e) => setKeywords(e.target.value)}\n                placeholder=\"frontend, developer, react, javascript\"\n                required\n                data-testid=\"input-keywords\"\n              />\n            </div>\n            \n            <div>\n              <Label className=\"block text-sm font-medium text-foreground mb-1\">\n                Priority\n              </Label>\n              <Select value={priority} onValueChange={(value: 'high' | 'medium' | 'low') => setPriority(value)}>\n                <SelectTrigger data-testid=\"select-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label className=\"block text-sm font-medium text-foreground mb-1\">\n                Check Interval\n              </Label>\n              <Select value={checkInterval} onValueChange={setCheckInterval}>\n                <SelectTrigger data-testid=\"select-interval\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1 hour\">Every Hour</SelectItem>\n                  <SelectItem value=\"6 hours\">Every 6 Hours</SelectItem>\n                  <SelectItem value=\"12 hours\">Every 12 Hours</SelectItem>\n                  <SelectItem value=\"1 day\">Daily</SelectItem>\n                  <SelectItem value=\"3 days\">Every 3 Days</SelectItem>\n                  <SelectItem value=\"1 week\">Weekly</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Button \n              type=\"submit\"\n              className=\"w-full py-3\"\n              disabled={addCompanyMutation.isPending || scrapingStatus.isActive}\n              data-testid=\"button-start-tracking\"\n            >\n              {addCompanyMutation.isPending ? 'Starting...' : 'Start Tracking'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n      \n      {/* Progress/Status Section */}\n      {scrapingStatus.isActive && (\n        <Card data-testid=\"card-scraping-status\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Tracking Progress</h3>\n            \n            <div className=\"space-y-4\">\n              {progressSteps.map((step) => (\n                <div key={step.id} className=\"flex items-center space-x-3\">\n                  <div className={`w-6 h-6 rounded-full flex items-center justify-center ${\n                    scrapingStatus.step >= step.id\n                      ? 'bg-primary'\n                      : scrapingStatus.step === step.id - 1\n                      ? 'bg-primary status-indicator'\n                      : 'bg-muted'\n                  }`}>\n                    {scrapingStatus.step > step.id ? (\n                      <Check className=\"h-3 w-3 text-primary-foreground\" />\n                    ) : scrapingStatus.step === step.id ? (\n                      <Loader2 className=\"h-3 w-3 text-primary-foreground animate-spin\" />\n                    ) : (\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full\"></div>\n                    )}\n                  </div>\n                  <span className={\n                    scrapingStatus.step >= step.id ? 'text-foreground' : 'text-muted-foreground'\n                  }>\n                    {step.label}\n                  </span>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n              <p className=\"text-sm text-muted-foreground\">\n                Found <span className=\"font-medium text-foreground\">{scrapingStatus.jobsFound}</span> jobs so far...\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8615},"client/src/pages/dashboard.tsx":{"content":"import { Plus, Building, Search, Clock, Check, Trash2 } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { JobCard } from '@/components/job-card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { statsApi, jobsApi, companiesApi, Job, Stats, Company } from '@/lib/api';\n\nfunction TrackedCompaniesSection() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: companies, isLoading: companiesLoading } = useQuery<Company[]>({\n    queryKey: ['/api/companies']\n  });\n\n  const { data: jobs } = useQuery<Job[]>({\n    queryKey: ['/api/jobs']\n  });\n\n  const deleteCompanyMutation = useMutation({\n    mutationFn: companiesApi.delete,\n    onSuccess: () => {\n      toast({\n        title: \"Company deleted\",\n        description: \"Company and all associated jobs have been removed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/jobs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete company.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getJobCountForCompany = (companyId: number) => {\n    return jobs?.filter(job => job.companyId === companyId).length || 0;\n  };\n\n  const handleDeleteCompany = (companyId: number, companyName: string) => {\n    if (confirm(`Are you sure you want to delete ${companyName}? This will also delete all associated jobs.`)) {\n      deleteCompanyMutation.mutate(companyId);\n    }\n  };\n\n  if (companiesLoading) {\n    return (\n      <div className=\"space-y-3\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"h-20 bg-muted rounded animate-pulse\"></div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!companies || companies.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-6 text-center\">\n          <p className=\"text-muted-foreground mb-4\">No companies tracked yet.</p>\n          <Button onClick={() => window.location.href = '/add-company'} data-testid=\"button-add-first-company\">\n            Add Your First Company\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {companies.map((company) => (\n        <Card key={company.id} data-testid={`card-company-${company.id}`}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <h3 className=\"font-medium text-foreground mb-1\">{company.name}</h3>\n                <p className=\"text-sm text-muted-foreground mb-2\">{company.careerPageUrl}</p>\n                <div className=\"flex items-center space-x-4 text-xs\">\n                  <span className=\"text-chart-2\">{getJobCountForCompany(company.id)} jobs found</span>\n                  <span className=\"text-muted-foreground\">Keywords: {company.keywords.join(', ')}</span>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => handleDeleteCompany(company.id, company.name)}\n                data-testid={`button-delete-company-${company.id}`}\n                className=\"p-2 text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<Stats>({\n    queryKey: ['/api/stats'],\n    enabled: !!user\n  });\n\n  const { data: jobs, isLoading: jobsLoading } = useQuery<Job[]>({\n    queryKey: ['/api/jobs'],\n    enabled: !!user\n  });\n\n  const recentJobs = jobs?.filter(job => {\n    const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    return new Date(job.dateFound) > dayAgo;\n  }).slice(0, 10) || [];\n\n  const handleJobClick = (jobId: number) => {\n    setLocation(`/job/${jobId}`);\n  };\n\n  if (statsLoading || jobsLoading) {\n    return (\n      <div className=\"p-4 pb-20\">\n        <div className=\"space-y-4\">\n          <div className=\"h-8 bg-muted rounded animate-pulse\"></div>\n          <div className=\"h-20 bg-muted rounded animate-pulse\"></div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"h-20 bg-muted rounded animate-pulse\"></div>\n            <div className=\"h-20 bg-muted rounded animate-pulse\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      {/* Welcome Section */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n          Welcome back, {user?.fullName?.split(' ')[0] || 'there'}!\n        </h1>\n        <p className=\"text-muted-foreground\">Here's what's happening with your job search</p>\n      </div>\n      \n      {/* Add Company Button */}\n      <div className=\"mb-8\">\n        <Button \n          onClick={() => setLocation('/add-company')}\n          className=\"w-full p-4 h-auto flex items-center justify-center space-x-3 shadow-sm\"\n          data-testid=\"button-add-company\"\n        >\n          <Plus className=\"h-5 w-5\" />\n          <span className=\"text-lg font-medium\">Add Company</span>\n        </Button>\n      </div>\n      \n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-2 gap-4 mb-8\">\n        <Card className=\"text-center\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-companies\">\n              {stats?.trackedCompanies || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Tracked Companies</div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"text-center\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-chart-2\" data-testid=\"stat-jobs\">\n              {stats?.totalJobs || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Jobs Found</div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Dashboard Actions */}\n      <div className=\"grid grid-cols-2 gap-4 mb-8\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation('/companies')}\n          data-testid=\"button-tracked-companies\"\n          className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-card border border-border hover:bg-accent\"\n        >\n          <div className=\"flex items-center justify-between w-full mb-2\">\n            <Building className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-xs bg-primary text-primary-foreground px-2 py-1 rounded-full\">\n              {stats?.trackedCompanies || 0}\n            </span>\n          </div>\n          <h3 className=\"font-medium text-foreground\">Tracked Companies</h3>\n          <p className=\"text-sm text-muted-foreground\">Manage your companies</p>\n        </Button>\n        \n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation('/jobs?filter=searched')}\n          data-testid=\"button-searched-jobs\"\n          className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-card border border-border hover:bg-accent\"\n        >\n          <div className=\"flex items-center justify-between w-full mb-2\">\n            <Search className=\"h-5 w-5 text-chart-2\" />\n            <span className=\"text-xs bg-chart-2 text-white px-2 py-1 rounded-full\">\n              {stats?.searchedJobs || 0}\n            </span>\n          </div>\n          <h3 className=\"font-medium text-foreground\">Searched Jobs</h3>\n          <p className=\"text-sm text-muted-foreground\">Your keyword matches</p>\n        </Button>\n        \n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation('/jobs?filter=recent')}\n          data-testid=\"button-recent-jobs\"\n          className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-card border border-border hover:bg-accent\"\n        >\n          <div className=\"flex items-center justify-between w-full mb-2\">\n            <Clock className=\"h-5 w-5 text-chart-3\" />\n            <span className=\"text-xs bg-chart-3 text-white px-2 py-1 rounded-full\">\n              {stats?.recentJobs || 0}\n            </span>\n          </div>\n          <h3 className=\"font-medium text-foreground\">Recent Jobs</h3>\n          <p className=\"text-sm text-muted-foreground\">Latest discoveries</p>\n        </Button>\n        \n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation('/jobs?filter=applied')}\n          data-testid=\"button-applied-jobs\"\n          className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-card border border-border hover:bg-accent\"\n        >\n          <div className=\"flex items-center justify-between w-full mb-2\">\n            <Check className=\"h-5 w-5 text-chart-4\" />\n            <span className=\"text-xs bg-chart-4 text-white px-2 py-1 rounded-full\">\n              {stats?.appliedJobs || 0}\n            </span>\n          </div>\n          <h3 className=\"font-medium text-foreground\">Applied Jobs</h3>\n          <p className=\"text-sm text-muted-foreground\">Track applications</p>\n        </Button>\n      </div>\n      \n      {/* Recent Jobs Vertical List */}\n      {recentJobs.length > 0 && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-foreground mb-4\">Recent Jobs</h2>\n          <div className=\"space-y-3\">\n            {recentJobs.map((job) => (\n              <JobCard\n                key={job.id}\n                job={job}\n                onClick={() => handleJobClick(job.id)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Tracked Companies Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-lg font-semibold text-foreground mb-4\">Tracked Companies</h2>\n        <TrackedCompaniesSection />\n      </div>\n    </div>\n  );\n}\n","size_bytes":10325},"client/src/pages/job-details.tsx":{"content":"import { ArrowLeft, ExternalLink, Trash2 } from 'lucide-react';\nimport { useLocation, useParams } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { jobsApi, Job } from '@/lib/api';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function JobDetails() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: jobs } = useQuery<Job[]>({\n    queryKey: ['/api/jobs']\n  });\n\n  const job = jobs?.find(j => j.id === parseInt(id || '0'));\n\n  const deleteJobMutation = useMutation({\n    mutationFn: jobsApi.delete,\n    onSuccess: () => {\n      toast({\n        title: \"Job deleted\",\n        description: \"The job has been removed from your list.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/jobs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      setLocation('/jobs');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete job.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const applyJobMutation = useMutation({\n    mutationFn: jobsApi.apply,\n    onSuccess: () => {\n      toast({\n        title: \"Application tracked\",\n        description: \"Job status updated to Applied.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/jobs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update job status.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleApply = () => {\n    if (job?.url) {\n      window.open(job.url, '_blank');\n      applyJobMutation.mutate(job.id);\n    }\n  };\n\n  const handleDelete = () => {\n    if (job && confirm('Are you sure you want to delete this job?')) {\n      deleteJobMutation.mutate(job.id);\n    }\n  };\n\n  if (!job) {\n    return (\n      <div className=\"p-4 pb-20\">\n        <div className=\"flex items-center mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/jobs')}\n            data-testid=\"button-back\"\n            className=\"mr-3\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-foreground\">Job Details</h1>\n        </div>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-muted-foreground\">Job not found</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const formatDate = (dateStr: string) => {\n    return new Date(dateStr).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <div className=\"flex items-center mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation('/jobs')}\n          data-testid=\"button-back\"\n          className=\"mr-3\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-bold text-foreground\">Job Details</h1>\n      </div>\n      \n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          {/* Job Header */}\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-job-title\">\n              {job.title}\n            </h2>\n            <div className=\"flex items-center space-x-4 text-muted-foreground mb-4\">\n              <span data-testid=\"text-company-name\">{job.companyName}</span>\n              <span>•</span>\n              <span data-testid=\"text-date-found\">{formatDate(job.dateFound)}</span>\n            </div>\n            {job.matchedKeywords && job.matchedKeywords.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {job.matchedKeywords.map((keyword, index) => (\n                  <Badge key={index} className=\"text-xs bg-primary text-primary-foreground\">\n                    {keyword}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          {/* Job Details */}\n          <div className=\"space-y-4 mb-6\">\n            {job.salary && (\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Salary</h3>\n                <p className=\"text-muted-foreground\" data-testid=\"text-salary\">{job.salary}</p>\n              </div>\n            )}\n            \n            {job.appliedAt && (\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Application Date</h3>\n                <p className=\"text-muted-foreground\" data-testid=\"text-applied-date\">\n                  {formatDate(job.appliedAt)}\n                </p>\n              </div>\n            )}\n            \n            {job.description && (\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Job Description</h3>\n                <div className=\"text-muted-foreground space-y-2\" data-testid=\"text-description\">\n                  <p>{job.description}</p>\n                </div>\n              </div>\n            )}\n            \n            {job.requirements && job.requirements.length > 0 && (\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Requirements</h3>\n                <ul className=\"text-muted-foreground space-y-1\">\n                  {job.requirements.map((req, index) => (\n                    <li key={index}>• {req}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex flex-col space-y-3\">\n            <Button \n              onClick={handleApply}\n              disabled={applyJobMutation.isPending}\n              data-testid=\"button-apply\"\n              className=\"w-full py-3\"\n            >\n              <ExternalLink className=\"mr-2 h-4 w-4\" />\n              {applyJobMutation.isPending ? 'Updating...' : 'Apply for Job'}\n            </Button>\n            \n            <Button \n              variant=\"destructive\"\n              onClick={handleDelete}\n              disabled={deleteJobMutation.isPending}\n              data-testid=\"button-delete\"\n              className=\"w-full py-3\"\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              {deleteJobMutation.isPending ? 'Deleting...' : 'Delete Job'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6865},"client/src/pages/jobs-list.tsx":{"content":"import { ArrowLeft } from 'lucide-react';\nimport { useLocation, useSearch } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { JobCard } from '@/components/job-card';\nimport { Job } from '@/lib/api';\n\nexport default function JobsList() {\n  const [, setLocation] = useLocation();\n  const search = useSearch();\n  const urlParams = new URLSearchParams(search);\n  const filter = urlParams.get('filter') || 'all';\n\n  const { data: jobs, isLoading } = useQuery<Job[]>({\n    queryKey: ['/api/jobs']\n  });\n\n  const filteredJobs = jobs?.filter(job => {\n    switch (filter) {\n      case 'searched':\n        return job.matchedKeywords && job.matchedKeywords.length > 0;\n      case 'applied':\n        return job.status === 'Applied';\n      case 'recent':\n        const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n        return new Date(job.dateFound) > dayAgo;\n      default:\n        return true;\n    }\n  }) || [];\n\n  const handleJobClick = (jobId: number) => {\n    setLocation(`/job/${jobId}`);\n  };\n\n  const handleFilterChange = (newFilter: string) => {\n    setLocation(`/jobs?filter=${newFilter}`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 pb-20\">\n        <div className=\"space-y-4\">\n          <div className=\"h-8 bg-muted rounded animate-pulse\"></div>\n          <div className=\"h-12 bg-muted rounded animate-pulse\"></div>\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-24 bg-muted rounded animate-pulse\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <div className=\"flex items-center mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation('/')}\n          data-testid=\"button-back\"\n          className=\"mr-3\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-bold text-foreground\">All Jobs</h1>\n      </div>\n      \n      {/* Filter Tabs */}\n      <div className=\"flex space-x-1 mb-6 bg-muted p-1 rounded-lg\">\n        <Button\n          variant={filter === 'all' ? 'default' : 'ghost'}\n          onClick={() => handleFilterChange('all')}\n          data-testid=\"filter-all\"\n          className=\"flex-1 py-2 px-4\"\n        >\n          All Jobs\n        </Button>\n        <Button\n          variant={filter === 'searched' ? 'default' : 'ghost'}\n          onClick={() => handleFilterChange('searched')}\n          data-testid=\"filter-searched\"\n          className=\"flex-1 py-2 px-4\"\n        >\n          Searched\n        </Button>\n        <Button\n          variant={filter === 'applied' ? 'default' : 'ghost'}\n          onClick={() => handleFilterChange('applied')}\n          data-testid=\"filter-applied\"\n          className=\"flex-1 py-2 px-4\"\n        >\n          Applied\n        </Button>\n      </div>\n      \n      {/* Jobs List */}\n      <div className=\"space-y-4\">\n        {filteredJobs.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-muted-foreground\">No jobs found for the selected filter.</p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredJobs.map((job) => (\n            <JobCard\n              key={job.id}\n              job={job}\n              onClick={() => handleJobClick(job.id)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3514},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Briefcase, Eye, EyeOff } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Logo/Brand */}\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 bg-primary rounded-lg flex items-center justify-center mb-4\">\n            <Briefcase className=\"h-8 w-8 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">JobTracker</h1>\n          <p className=\"text-muted-foreground\">Track your dream jobs effortlessly</p>\n        </div>\n        \n        {/* Login Form */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-1\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\" className=\"block text-sm font-medium text-foreground mb-1\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"Enter your password\"\n                    required\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? 'Signing In...' : 'Sign In'}\n              </Button>\n              \n              <div className=\"text-center\">\n                <Link href=\"/signup\">\n                  <Button variant=\"link\" className=\"text-primary hover:text-primary/80 text-sm\">\n                    Don't have an account? Sign up\n                  </Button>\n                </Link>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4284},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { ArrowLeft, Sun, Moon, Bell, BellOff } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { useTheme } from '@/hooks/use-theme';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Settings() {\n  const [, setLocation] = useLocation();\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  \n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [pushNotifications, setPushNotifications] = useState(false);\n\n  const handleThemeChange = (newTheme: 'light' | 'dark') => {\n    setTheme(newTheme);\n    toast({\n      title: \"Theme updated\",\n      description: `Switched to ${newTheme} mode`,\n    });\n  };\n\n  const handleNotificationChange = (type: 'email' | 'push', enabled: boolean) => {\n    if (type === 'email') {\n      setEmailNotifications(enabled);\n    } else {\n      setPushNotifications(enabled);\n    }\n    toast({\n      title: \"Settings updated\",\n      description: `${type} notifications ${enabled ? 'enabled' : 'disabled'}`,\n    });\n  };\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <div className=\"flex items-center mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation('/')}\n          data-testid=\"button-back\"\n          className=\"mr-3\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-bold text-foreground\">Settings</h1>\n      </div>\n      \n      <div className=\"space-y-6\">\n        {/* Notifications */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium text-foreground mb-4\">Notifications</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Bell className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-foreground\">Email notifications</span>\n                </div>\n                <Switch\n                  checked={emailNotifications}\n                  onCheckedChange={(checked) => handleNotificationChange('email', checked)}\n                  data-testid=\"switch-email-notifications\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <BellOff className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-foreground\">Push notifications</span>\n                </div>\n                <Switch\n                  checked={pushNotifications}\n                  onCheckedChange={(checked) => handleNotificationChange('push', checked)}\n                  data-testid=\"switch-push-notifications\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Theme */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium text-foreground mb-4\">Appearance</h3>\n            <div className=\"space-y-3\">\n              <Button\n                variant={theme === 'light' ? 'default' : 'outline'}\n                onClick={() => handleThemeChange('light')}\n                data-testid=\"button-light-theme\"\n                className=\"w-full flex items-center justify-between p-3\"\n              >\n                <span>Light Mode</span>\n                <Sun className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button\n                variant={theme === 'dark' ? 'default' : 'outline'}\n                onClick={() => handleThemeChange('dark')}\n                data-testid=\"button-dark-theme\"\n                className=\"w-full flex items-center justify-between p-3\"\n              >\n                <span>Dark Mode</span>\n                <Moon className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Account */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium text-foreground mb-4\">Account</h3>\n            <div className=\"space-y-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => toast({ title: \"Feature coming soon\", description: \"Password change will be available soon.\" })}\n                data-testid=\"button-change-password\"\n                className=\"w-full text-left justify-start p-3\"\n              >\n                Change Password\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                onClick={() => toast({ title: \"Feature coming soon\", description: \"Data export will be available soon.\" })}\n                data-testid=\"button-export-data\"\n                className=\"w-full text-left justify-start p-3\"\n              >\n                Export Data\n              </Button>\n              \n              <Button\n                variant=\"destructive\"\n                onClick={() => toast({ title: \"Feature coming soon\", description: \"Account deletion will be available soon.\" })}\n                data-testid=\"button-delete-account\"\n                className=\"w-full text-left justify-start p-3\"\n              >\n                Delete Account\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5575},"client/src/pages/signup.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Briefcase, Eye, EyeOff } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Signup() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [fullName, setFullName] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { signup } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await signup(email, password, fullName);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to JobTracker. Start tracking your dream jobs.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Failed to create account.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Logo/Brand */}\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 bg-primary rounded-lg flex items-center justify-center mb-4\">\n            <Briefcase className=\"h-8 w-8 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Create Account</h1>\n          <p className=\"text-muted-foreground\">Start tracking your job opportunities</p>\n        </div>\n        \n        {/* Signup Form */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"fullName\" className=\"block text-sm font-medium text-foreground mb-1\">\n                  Full Name\n                </Label>\n                <Input\n                  id=\"fullName\"\n                  type=\"text\"\n                  value={fullName}\n                  onChange={(e) => setFullName(e.target.value)}\n                  placeholder=\"Enter your full name\"\n                  required\n                  data-testid=\"input-fullname\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-1\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\" className=\"block text-sm font-medium text-foreground mb-1\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"Create a password\"\n                    required\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-signup\"\n              >\n                {isLoading ? 'Creating Account...' : 'Create Account'}\n              </Button>\n              \n              <div className=\"text-center\">\n                <Link href=\"/login\">\n                  <Button variant=\"link\" className=\"text-primary hover:text-primary/80 text-sm\">\n                    Already have an account? Sign in\n                  </Button>\n                </Link>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4927},"client/src/pages/tracked-companies.tsx":{"content":"import { ArrowLeft } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { CompanyCard } from '@/components/company-card';\nimport { companiesApi, jobsApi, Company, Job } from '@/lib/api';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function TrackedCompanies() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: companies, isLoading: companiesLoading } = useQuery<Company[]>({\n    queryKey: ['/api/companies']\n  });\n\n  const { data: jobs } = useQuery<Job[]>({\n    queryKey: ['/api/jobs']\n  });\n\n  const deleteCompanyMutation = useMutation({\n    mutationFn: companiesApi.delete,\n    onSuccess: () => {\n      toast({\n        title: \"Company deleted\",\n        description: \"Company and all associated jobs have been removed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/jobs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete company.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getJobCountForCompany = (companyId: number) => {\n    return jobs?.filter(job => job.companyId === companyId).length || 0;\n  };\n\n  const handleDeleteCompany = (companyId: number, companyName: string) => {\n    if (confirm(`Are you sure you want to delete ${companyName}? This will also delete all associated jobs.`)) {\n      deleteCompanyMutation.mutate(companyId);\n    }\n  };\n\n  if (companiesLoading) {\n    return (\n      <div className=\"p-4 pb-20\">\n        <div className=\"space-y-4\">\n          <div className=\"h-8 bg-muted rounded animate-pulse\"></div>\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-muted rounded animate-pulse\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <div className=\"flex items-center mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation('/')}\n          data-testid=\"button-back\"\n          className=\"mr-3\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-bold text-foreground\">Tracked Companies</h1>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {!companies || companies.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-muted-foreground mb-4\">No companies tracked yet.</p>\n              <Button onClick={() => setLocation('/add-company')} data-testid=\"button-add-first-company\">\n                Add Your First Company\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          companies.map((company) => (\n            <CompanyCard\n              key={company.id}\n              company={company}\n              jobCount={getJobCountForCompany(company.id)}\n              onDelete={() => handleDeleteCompany(company.id, company.name)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3406},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { Home, Briefcase, Settings } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface BottomNavigationProps {\n  activeTab: 'dashboard' | 'jobs' | 'settings';\n  onTabChange: (tab: 'dashboard' | 'jobs' | 'settings') => void;\n}\n\nexport function BottomNavigation({ activeTab, onTabChange }: BottomNavigationProps) {\n  return (\n    <nav className=\"bg-card border-t border-border px-4 py-2 fixed bottom-0 left-0 right-0 z-30\">\n      <div className=\"flex justify-around\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => onTabChange('dashboard')}\n          data-testid=\"tab-dashboard\"\n          className={`flex flex-col items-center py-2 px-4 h-auto ${\n            activeTab === 'dashboard' ? 'text-primary' : 'text-muted-foreground'\n          }`}\n        >\n          <Home className=\"h-5 w-5 mb-1\" />\n          <span className=\"text-xs font-medium\">Dashboard</span>\n        </Button>\n        \n        <Button\n          variant=\"ghost\"\n          onClick={() => onTabChange('jobs')}\n          data-testid=\"tab-jobs\"\n          className={`flex flex-col items-center py-2 px-4 h-auto ${\n            activeTab === 'jobs' ? 'text-primary' : 'text-muted-foreground'\n          }`}\n        >\n          <Briefcase className=\"h-5 w-5 mb-1\" />\n          <span className=\"text-xs\">Jobs</span>\n        </Button>\n        \n        <Button\n          variant=\"ghost\"\n          onClick={() => onTabChange('settings')}\n          data-testid=\"tab-settings\"\n          className={`flex flex-col items-center py-2 px-4 h-auto ${\n            activeTab === 'settings' ? 'text-primary' : 'text-muted-foreground'\n          }`}\n        >\n          <Settings className=\"h-5 w-5 mb-1\" />\n          <span className=\"text-xs\">Settings</span>\n        </Button>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1803},"client/src/components/layout/side-drawer.tsx":{"content":"import { X, User, Settings, Palette, LogOut } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useTheme } from '@/hooks/use-theme';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SideDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onNavigate: (view: string) => void;\n}\n\nexport function SideDrawer({ isOpen, onClose, onNavigate }: SideDrawerProps) {\n  const { user, logout } = useAuth();\n  const { toggleTheme } = useTheme();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been logged out of your account.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to log out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleThemeToggle = () => {\n    toggleTheme();\n    toast({\n      title: \"Theme changed\",\n      description: \"The app theme has been updated.\",\n    });\n  };\n\n  const userInitials = user?.fullName\n    ? user.fullName.split(' ').map(n => n[0]).join('').toUpperCase()\n    : user?.email?.charAt(0).toUpperCase() || 'U';\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-50\"\n          onClick={onClose}\n          data-testid=\"overlay-drawer\"\n        />\n      )}\n      \n      {/* Drawer */}\n      <div \n        className={`fixed top-0 left-0 h-full w-64 bg-card border-r border-border z-50 transform transition-transform duration-300 ease-out ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        }`}\n        data-testid=\"drawer-side\"\n      >\n        <div className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-lg font-semibold text-foreground\">Menu</h2>\n            <Button \n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              data-testid=\"button-close-drawer\"\n              className=\"p-1 hover:bg-accent\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {/* User Profile Section */}\n          {user && (\n            <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg mb-6\">\n              <div className=\"h-10 w-10 bg-primary rounded-full flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-medium text-sm\">\n                  {userInitials}\n                </span>\n              </div>\n              <div>\n                <p className=\"font-medium text-foreground text-sm\">{user.fullName || 'User'}</p>\n                <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n              </div>\n            </div>\n          )}\n          \n          {/* Menu Items */}\n          <nav className=\"space-y-2\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start\"\n              onClick={() => onNavigate('account')}\n              data-testid=\"button-account\"\n            >\n              <User className=\"mr-3 h-4 w-4\" />\n              Account\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start\"\n              onClick={() => onNavigate('settings')}\n              data-testid=\"button-settings\"\n            >\n              <Settings className=\"mr-3 h-4 w-4\" />\n              Settings\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start\"\n              onClick={handleThemeToggle}\n              data-testid=\"button-theme\"\n            >\n              <Palette className=\"mr-3 h-4 w-4\" />\n              Change Theme\n            </Button>\n            \n            <hr className=\"border-border my-4\" />\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-3 h-4 w-4\" />\n              Log Out\n            </Button>\n          </nav>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":4383},"client/src/components/layout/top-navigation.tsx":{"content":"import { Briefcase, Menu } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface TopNavigationProps {\n  onMenuClick: () => void;\n  onLogoClick: () => void;\n}\n\nexport function TopNavigation({ onMenuClick, onLogoClick }: TopNavigationProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-4 py-3 flex items-center justify-between sticky top-0 z-40\">\n      <Button \n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={onMenuClick}\n        data-testid=\"button-menu\"\n        className=\"p-2 hover:bg-accent\"\n      >\n        <Menu className=\"h-5 w-5\" />\n      </Button>\n      \n      <Button\n        variant=\"ghost\"\n        onClick={onLogoClick}\n        data-testid=\"button-logo\"\n        className=\"flex items-center space-x-2 hover:bg-transparent\"\n      >\n        <div className=\"h-8 w-8 bg-primary rounded-md flex items-center justify-center\">\n          <Briefcase className=\"h-4 w-4 text-primary-foreground\" />\n        </div>\n        <span className=\"font-semibold text-foreground\">JobTracker</span>\n      </Button>\n      \n      <div className=\"w-10\"></div> {/* Spacer for centering */}\n    </header>\n  );\n}\n","size_bytes":1161},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}